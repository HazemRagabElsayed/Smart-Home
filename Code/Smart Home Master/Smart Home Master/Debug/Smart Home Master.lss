
Smart Home Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000210  00800060  00001b3e  00001bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800270  00800270  00001de2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00002538  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002056  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000788  00000000  00000000  0000470e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd2  00000000  00000000  00004e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00005e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  0000621c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018be  00000000  00000000  00006713  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00007fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 99 04 	call	0x932	; 0x932 <main>
      8a:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vinit>:
 */ 
#include <avr/io.h>
#include "std_macros.h"
void ADC_vinit(void)
{
	SET_BIT(ADMUX,REFS0); //configure VREF
      92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
      94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN); // enable ADC
      96:	37 9a       	sbi	0x06, 7	; 6
	/* adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
      98:	32 9a       	sbi	0x06, 2	; 6
	SET_BIT(ADCSRA,ADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
}
      9c:	08 95       	ret

0000009e <ADC_u16Read>:
 unsigned short ADC_u16Read(void)
{
	 unsigned short read_val;
	
	SET_BIT(ADCSRA,ADSC);
      9e:	36 9a       	sbi	0x06, 6	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1
      a0:	34 9b       	sbis	0x06, 4	; 6
      a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
      a4:	34 9a       	sbi	0x06, 4	; 6
	read_val=(ADCL);
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	90 e0       	ldi	r25, 0x00	; 0
	read_val|=(ADCH<<8);
      aa:	45 b1       	in	r20, 0x05	; 5
      ac:	34 2f       	mov	r19, r20
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	82 2b       	or	r24, r18
      b2:	93 2b       	or	r25, r19
	return read_val ;
      b4:	08 95       	ret

000000b6 <DIO_vsetPINDir>:
#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
      b6:	82 34       	cpi	r24, 0x42	; 66
      b8:	51 f1       	breq	.+84     	; 0x10e <DIO_vsetPINDir+0x58>
      ba:	83 34       	cpi	r24, 0x43	; 67
      bc:	20 f4       	brcc	.+8      	; 0xc6 <DIO_vsetPINDir+0x10>
      be:	81 34       	cpi	r24, 0x41	; 65
      c0:	09 f0       	breq	.+2      	; 0xc4 <DIO_vsetPINDir+0xe>
      c2:	7b c0       	rjmp	.+246    	; 0x1ba <DIO_vsetPINDir+0x104>
      c4:	07 c0       	rjmp	.+14     	; 0xd4 <DIO_vsetPINDir+0x1e>
      c6:	83 34       	cpi	r24, 0x43	; 67
      c8:	09 f4       	brne	.+2      	; 0xcc <DIO_vsetPINDir+0x16>
      ca:	3e c0       	rjmp	.+124    	; 0x148 <DIO_vsetPINDir+0x92>
      cc:	84 34       	cpi	r24, 0x44	; 68
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_vsetPINDir+0x1c>
      d0:	74 c0       	rjmp	.+232    	; 0x1ba <DIO_vsetPINDir+0x104>
      d2:	57 c0       	rjmp	.+174    	; 0x182 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
      d4:	41 30       	cpi	r20, 0x01	; 1
      d6:	69 f4       	brne	.+26     	; 0xf2 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
      d8:	2a b3       	in	r18, 0x1a	; 26
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	ac 01       	movw	r20, r24
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_vsetPINDir+0x30>
      e2:	44 0f       	add	r20, r20
      e4:	55 1f       	adc	r21, r21
      e6:	6a 95       	dec	r22
      e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_vsetPINDir+0x2c>
      ea:	ba 01       	movw	r22, r20
      ec:	62 2b       	or	r22, r18
      ee:	6a bb       	out	0x1a, r22	; 26
      f0:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
      f2:	2a b3       	in	r18, 0x1a	; 26
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	ac 01       	movw	r20, r24
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x4a>
      fc:	44 0f       	add	r20, r20
      fe:	55 1f       	adc	r21, r21
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x46>
     104:	ba 01       	movw	r22, r20
     106:	60 95       	com	r22
     108:	62 23       	and	r22, r18
     10a:	6a bb       	out	0x1a, r22	; 26
     10c:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
     10e:	41 30       	cpi	r20, 0x01	; 1
     110:	69 f4       	brne	.+26     	; 0x12c <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     112:	27 b3       	in	r18, 0x17	; 23
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	ac 01       	movw	r20, r24
     11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_vsetPINDir+0x6a>
     11c:	44 0f       	add	r20, r20
     11e:	55 1f       	adc	r21, r21
     120:	6a 95       	dec	r22
     122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_vsetPINDir+0x66>
     124:	ba 01       	movw	r22, r20
     126:	62 2b       	or	r22, r18
     128:	67 bb       	out	0x17, r22	; 23
     12a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     12c:	27 b3       	in	r18, 0x17	; 23
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	ac 01       	movw	r20, r24
     134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_vsetPINDir+0x84>
     136:	44 0f       	add	r20, r20
     138:	55 1f       	adc	r21, r21
     13a:	6a 95       	dec	r22
     13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_vsetPINDir+0x80>
     13e:	ba 01       	movw	r22, r20
     140:	60 95       	com	r22
     142:	62 23       	and	r22, r18
     144:	67 bb       	out	0x17, r22	; 23
     146:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
     148:	41 30       	cpi	r20, 0x01	; 1
     14a:	69 f4       	brne	.+26     	; 0x166 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     14c:	24 b3       	in	r18, 0x14	; 20
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	ac 01       	movw	r20, r24
     154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_vsetPINDir+0xa4>
     156:	44 0f       	add	r20, r20
     158:	55 1f       	adc	r21, r21
     15a:	6a 95       	dec	r22
     15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_vsetPINDir+0xa0>
     15e:	ba 01       	movw	r22, r20
     160:	62 2b       	or	r22, r18
     162:	64 bb       	out	0x14, r22	; 20
     164:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     166:	24 b3       	in	r18, 0x14	; 20
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	ac 01       	movw	r20, r24
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_vsetPINDir+0xbe>
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	6a 95       	dec	r22
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_vsetPINDir+0xba>
     178:	ba 01       	movw	r22, r20
     17a:	60 95       	com	r22
     17c:	62 23       	and	r22, r18
     17e:	64 bb       	out	0x14, r22	; 20
     180:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
     182:	41 30       	cpi	r20, 0x01	; 1
     184:	69 f4       	brne	.+26     	; 0x1a0 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     186:	21 b3       	in	r18, 0x11	; 17
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	ac 01       	movw	r20, r24
     18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vsetPINDir+0xde>
     190:	44 0f       	add	r20, r20
     192:	55 1f       	adc	r21, r21
     194:	6a 95       	dec	r22
     196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vsetPINDir+0xda>
     198:	ba 01       	movw	r22, r20
     19a:	62 2b       	or	r22, r18
     19c:	61 bb       	out	0x11, r22	; 17
     19e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     1a0:	21 b3       	in	r18, 0x11	; 17
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	ac 01       	movw	r20, r24
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_vsetPINDir+0xf8>
     1aa:	44 0f       	add	r20, r20
     1ac:	55 1f       	adc	r21, r21
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_vsetPINDir+0xf4>
     1b2:	ba 01       	movw	r22, r20
     1b4:	60 95       	com	r22
     1b6:	62 23       	and	r22, r18
     1b8:	61 bb       	out	0x11, r22	; 17
     1ba:	08 95       	ret

000001bc <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
     1bc:	82 34       	cpi	r24, 0x42	; 66
     1be:	51 f1       	breq	.+84     	; 0x214 <DIO_write+0x58>
     1c0:	83 34       	cpi	r24, 0x43	; 67
     1c2:	20 f4       	brcc	.+8      	; 0x1cc <DIO_write+0x10>
     1c4:	81 34       	cpi	r24, 0x41	; 65
     1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_write+0xe>
     1c8:	7b c0       	rjmp	.+246    	; 0x2c0 <DIO_write+0x104>
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <DIO_write+0x1e>
     1cc:	83 34       	cpi	r24, 0x43	; 67
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <DIO_write+0x16>
     1d0:	3e c0       	rjmp	.+124    	; 0x24e <DIO_write+0x92>
     1d2:	84 34       	cpi	r24, 0x44	; 68
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_write+0x1c>
     1d6:	74 c0       	rjmp	.+232    	; 0x2c0 <DIO_write+0x104>
     1d8:	57 c0       	rjmp	.+174    	; 0x288 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
     1da:	41 30       	cpi	r20, 0x01	; 1
     1dc:	69 f4       	brne	.+26     	; 0x1f8 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     1de:	2b b3       	in	r18, 0x1b	; 27
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	ac 01       	movw	r20, r24
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_write+0x30>
     1e8:	44 0f       	add	r20, r20
     1ea:	55 1f       	adc	r21, r21
     1ec:	6a 95       	dec	r22
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_write+0x2c>
     1f0:	ba 01       	movw	r22, r20
     1f2:	62 2b       	or	r22, r18
     1f4:	6b bb       	out	0x1b, r22	; 27
     1f6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     1f8:	2b b3       	in	r18, 0x1b	; 27
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	ac 01       	movw	r20, r24
     200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_write+0x4a>
     202:	44 0f       	add	r20, r20
     204:	55 1f       	adc	r21, r21
     206:	6a 95       	dec	r22
     208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_write+0x46>
     20a:	ba 01       	movw	r22, r20
     20c:	60 95       	com	r22
     20e:	62 23       	and	r22, r18
     210:	6b bb       	out	0x1b, r22	; 27
     212:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     214:	41 30       	cpi	r20, 0x01	; 1
     216:	69 f4       	brne	.+26     	; 0x232 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     218:	28 b3       	in	r18, 0x18	; 24
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	ac 01       	movw	r20, r24
     220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_write+0x6a>
     222:	44 0f       	add	r20, r20
     224:	55 1f       	adc	r21, r21
     226:	6a 95       	dec	r22
     228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_write+0x66>
     22a:	ba 01       	movw	r22, r20
     22c:	62 2b       	or	r22, r18
     22e:	68 bb       	out	0x18, r22	; 24
     230:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     232:	28 b3       	in	r18, 0x18	; 24
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	ac 01       	movw	r20, r24
     23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0x84>
     23c:	44 0f       	add	r20, r20
     23e:	55 1f       	adc	r21, r21
     240:	6a 95       	dec	r22
     242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x80>
     244:	ba 01       	movw	r22, r20
     246:	60 95       	com	r22
     248:	62 23       	and	r22, r18
     24a:	68 bb       	out	0x18, r22	; 24
     24c:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     24e:	41 30       	cpi	r20, 0x01	; 1
     250:	69 f4       	brne	.+26     	; 0x26c <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     252:	25 b3       	in	r18, 0x15	; 21
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	ac 01       	movw	r20, r24
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_write+0xa4>
     25c:	44 0f       	add	r20, r20
     25e:	55 1f       	adc	r21, r21
     260:	6a 95       	dec	r22
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_write+0xa0>
     264:	ba 01       	movw	r22, r20
     266:	62 2b       	or	r22, r18
     268:	65 bb       	out	0x15, r22	; 21
     26a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     26c:	25 b3       	in	r18, 0x15	; 21
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	ac 01       	movw	r20, r24
     274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xbe>
     276:	44 0f       	add	r20, r20
     278:	55 1f       	adc	r21, r21
     27a:	6a 95       	dec	r22
     27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xba>
     27e:	ba 01       	movw	r22, r20
     280:	60 95       	com	r22
     282:	62 23       	and	r22, r18
     284:	65 bb       	out	0x15, r22	; 21
     286:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     288:	41 30       	cpi	r20, 0x01	; 1
     28a:	69 f4       	brne	.+26     	; 0x2a6 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     28c:	22 b3       	in	r18, 0x12	; 18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	ac 01       	movw	r20, r24
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write+0xde>
     296:	44 0f       	add	r20, r20
     298:	55 1f       	adc	r21, r21
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write+0xda>
     29e:	ba 01       	movw	r22, r20
     2a0:	62 2b       	or	r22, r18
     2a2:	62 bb       	out	0x12, r22	; 18
     2a4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     2a6:	22 b3       	in	r18, 0x12	; 18
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	ac 01       	movw	r20, r24
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0xf8>
     2b0:	44 0f       	add	r20, r20
     2b2:	55 1f       	adc	r21, r21
     2b4:	6a 95       	dec	r22
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0xf4>
     2b8:	ba 01       	movw	r22, r20
     2ba:	60 95       	com	r22
     2bc:	62 23       	and	r22, r18
     2be:	62 bb       	out	0x12, r22	; 18
     2c0:	08 95       	ret

000002c2 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     2c2:	82 34       	cpi	r24, 0x42	; 66
     2c4:	f1 f0       	breq	.+60     	; 0x302 <DIO_u8read+0x40>
     2c6:	83 34       	cpi	r24, 0x43	; 67
     2c8:	20 f4       	brcc	.+8      	; 0x2d2 <DIO_u8read+0x10>
     2ca:	81 34       	cpi	r24, 0x41	; 65
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <DIO_u8read+0xe>
     2ce:	4f c0       	rjmp	.+158    	; 0x36e <DIO_u8read+0xac>
     2d0:	06 c0       	rjmp	.+12     	; 0x2de <DIO_u8read+0x1c>
     2d2:	83 34       	cpi	r24, 0x43	; 67
     2d4:	41 f1       	breq	.+80     	; 0x326 <DIO_u8read+0x64>
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f0       	breq	.+2      	; 0x2dc <DIO_u8read+0x1a>
     2da:	49 c0       	rjmp	.+146    	; 0x36e <DIO_u8read+0xac>
     2dc:	36 c0       	rjmp	.+108    	; 0x34a <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     2de:	29 b3       	in	r18, 0x19	; 25
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	06 2e       	mov	r0, r22
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x2a>
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x26>
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	82 23       	and	r24, r18
     2f4:	93 23       	and	r25, r19
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x3a>
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x36>
		break;
     300:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     302:	26 b3       	in	r18, 0x16	; 22
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	06 2e       	mov	r0, r22
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x4e>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	0a 94       	dec	r0
     312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x4a>
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	82 23       	and	r24, r18
     318:	93 23       	and	r25, r19
     31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x5e>
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	6a 95       	dec	r22
     322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x5a>
		break;
     324:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     326:	23 b3       	in	r18, 0x13	; 19
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	06 2e       	mov	r0, r22
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x72>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x6e>
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	82 23       	and	r24, r18
     33c:	93 23       	and	r25, r19
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0x82>
     340:	95 95       	asr	r25
     342:	87 95       	ror	r24
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0x7e>
		break;
     348:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     34a:	20 b3       	in	r18, 0x10	; 16
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	06 2e       	mov	r0, r22
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_u8read+0x96>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_u8read+0x92>
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	82 23       	and	r24, r18
     360:	93 23       	and	r25, r19
     362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_u8read+0xa6>
     364:	95 95       	asr	r25
     366:	87 95       	ror	r24
     368:	6a 95       	dec	r22
     36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_u8read+0xa2>
		break;
     36c:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     36e:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
     370:	08 95       	ret

00000372 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     372:	82 34       	cpi	r24, 0x42	; 66
     374:	b9 f0       	breq	.+46     	; 0x3a4 <DIO_toggle+0x32>
     376:	83 34       	cpi	r24, 0x43	; 67
     378:	18 f4       	brcc	.+6      	; 0x380 <DIO_toggle+0xe>
     37a:	81 34       	cpi	r24, 0x41	; 65
     37c:	c9 f5       	brne	.+114    	; 0x3f0 <DIO_toggle+0x7e>
     37e:	05 c0       	rjmp	.+10     	; 0x38a <DIO_toggle+0x18>
     380:	83 34       	cpi	r24, 0x43	; 67
     382:	e9 f0       	breq	.+58     	; 0x3be <DIO_toggle+0x4c>
     384:	84 34       	cpi	r24, 0x44	; 68
     386:	a1 f5       	brne	.+104    	; 0x3f0 <DIO_toggle+0x7e>
     388:	27 c0       	rjmp	.+78     	; 0x3d8 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     38a:	2b b3       	in	r18, 0x1b	; 27
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	ac 01       	movw	r20, r24
     392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_toggle+0x26>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	6a 95       	dec	r22
     39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_toggle+0x22>
     39c:	ba 01       	movw	r22, r20
     39e:	62 27       	eor	r22, r18
     3a0:	6b bb       	out	0x1b, r22	; 27
		break;
     3a2:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     3a4:	28 b3       	in	r18, 0x18	; 24
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	ac 01       	movw	r20, r24
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_toggle+0x40>
     3ae:	44 0f       	add	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	6a 95       	dec	r22
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_toggle+0x3c>
     3b6:	ba 01       	movw	r22, r20
     3b8:	62 27       	eor	r22, r18
     3ba:	68 bb       	out	0x18, r22	; 24
		break;
     3bc:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     3be:	25 b3       	in	r18, 0x15	; 21
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	ac 01       	movw	r20, r24
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_toggle+0x5a>
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_toggle+0x56>
     3d0:	ba 01       	movw	r22, r20
     3d2:	62 27       	eor	r22, r18
     3d4:	65 bb       	out	0x15, r22	; 21
		break;
     3d6:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     3d8:	22 b3       	in	r18, 0x12	; 18
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	ac 01       	movw	r20, r24
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_toggle+0x74>
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_toggle+0x70>
     3ea:	ba 01       	movw	r22, r20
     3ec:	62 27       	eor	r22, r18
     3ee:	62 bb       	out	0x12, r22	; 18
     3f0:	08 95       	ret

000003f2 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
     3f2:	82 34       	cpi	r24, 0x42	; 66
     3f4:	61 f0       	breq	.+24     	; 0x40e <DIO_set_port_direction+0x1c>
     3f6:	83 34       	cpi	r24, 0x43	; 67
     3f8:	18 f4       	brcc	.+6      	; 0x400 <DIO_set_port_direction+0xe>
     3fa:	81 34       	cpi	r24, 0x41	; 65
     3fc:	69 f4       	brne	.+26     	; 0x418 <DIO_set_port_direction+0x26>
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <DIO_set_port_direction+0x18>
     400:	83 34       	cpi	r24, 0x43	; 67
     402:	39 f0       	breq	.+14     	; 0x412 <DIO_set_port_direction+0x20>
     404:	84 34       	cpi	r24, 0x44	; 68
     406:	41 f4       	brne	.+16     	; 0x418 <DIO_set_port_direction+0x26>
     408:	06 c0       	rjmp	.+12     	; 0x416 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     40a:	6a bb       	out	0x1a, r22	; 26
		break ;
     40c:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
     40e:	67 bb       	out	0x17, r22	; 23
		break ;
     410:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
     412:	64 bb       	out	0x14, r22	; 20
		break ;
     414:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
     416:	61 bb       	out	0x11, r22	; 17
     418:	08 95       	ret

0000041a <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     41a:	82 34       	cpi	r24, 0x42	; 66
     41c:	61 f0       	breq	.+24     	; 0x436 <DIO_write_port+0x1c>
     41e:	83 34       	cpi	r24, 0x43	; 67
     420:	18 f4       	brcc	.+6      	; 0x428 <DIO_write_port+0xe>
     422:	81 34       	cpi	r24, 0x41	; 65
     424:	69 f4       	brne	.+26     	; 0x440 <DIO_write_port+0x26>
     426:	05 c0       	rjmp	.+10     	; 0x432 <DIO_write_port+0x18>
     428:	83 34       	cpi	r24, 0x43	; 67
     42a:	39 f0       	breq	.+14     	; 0x43a <DIO_write_port+0x20>
     42c:	84 34       	cpi	r24, 0x44	; 68
     42e:	41 f4       	brne	.+16     	; 0x440 <DIO_write_port+0x26>
     430:	06 c0       	rjmp	.+12     	; 0x43e <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     432:	6b bb       	out	0x1b, r22	; 27
		break ;
     434:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     436:	68 bb       	out	0x18, r22	; 24
		break ;
     438:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     43a:	65 bb       	out	0x15, r22	; 21
		break ;
     43c:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     43e:	62 bb       	out	0x12, r22	; 18
     440:	08 95       	ret

00000442 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     442:	82 34       	cpi	r24, 0x42	; 66
     444:	61 f0       	breq	.+24     	; 0x45e <DIO_read_port+0x1c>
     446:	83 34       	cpi	r24, 0x43	; 67
     448:	18 f4       	brcc	.+6      	; 0x450 <DIO_read_port+0xe>
     44a:	81 34       	cpi	r24, 0x41	; 65
     44c:	71 f4       	brne	.+28     	; 0x46a <DIO_read_port+0x28>
     44e:	05 c0       	rjmp	.+10     	; 0x45a <DIO_read_port+0x18>
     450:	83 34       	cpi	r24, 0x43	; 67
     452:	39 f0       	breq	.+14     	; 0x462 <DIO_read_port+0x20>
     454:	84 34       	cpi	r24, 0x44	; 68
     456:	49 f4       	brne	.+18     	; 0x46a <DIO_read_port+0x28>
     458:	06 c0       	rjmp	.+12     	; 0x466 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
     45a:	89 b3       	in	r24, 0x19	; 25
		break ;
     45c:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
     45e:	86 b3       	in	r24, 0x16	; 22
		break ;
     460:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
     462:	83 b3       	in	r24, 0x13	; 19
		break ;
     464:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
     466:	80 b3       	in	r24, 0x10	; 16
		break ;
     468:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
     46a:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
     46c:	08 95       	ret

0000046e <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     46e:	82 34       	cpi	r24, 0x42	; 66
     470:	51 f1       	breq	.+84     	; 0x4c6 <DIO_vconnectpullup+0x58>
     472:	83 34       	cpi	r24, 0x43	; 67
     474:	20 f4       	brcc	.+8      	; 0x47e <DIO_vconnectpullup+0x10>
     476:	81 34       	cpi	r24, 0x41	; 65
     478:	09 f0       	breq	.+2      	; 0x47c <DIO_vconnectpullup+0xe>
     47a:	7b c0       	rjmp	.+246    	; 0x572 <DIO_vconnectpullup+0x104>
     47c:	07 c0       	rjmp	.+14     	; 0x48c <DIO_vconnectpullup+0x1e>
     47e:	83 34       	cpi	r24, 0x43	; 67
     480:	09 f4       	brne	.+2      	; 0x484 <DIO_vconnectpullup+0x16>
     482:	3e c0       	rjmp	.+124    	; 0x500 <DIO_vconnectpullup+0x92>
     484:	84 34       	cpi	r24, 0x44	; 68
     486:	09 f0       	breq	.+2      	; 0x48a <DIO_vconnectpullup+0x1c>
     488:	74 c0       	rjmp	.+232    	; 0x572 <DIO_vconnectpullup+0x104>
     48a:	57 c0       	rjmp	.+174    	; 0x53a <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     48c:	41 30       	cpi	r20, 0x01	; 1
     48e:	69 f4       	brne	.+26     	; 0x4aa <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
     490:	2b b3       	in	r18, 0x1b	; 27
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	ac 01       	movw	r20, r24
     498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_vconnectpullup+0x30>
     49a:	44 0f       	add	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	6a 95       	dec	r22
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_vconnectpullup+0x2c>
     4a2:	ba 01       	movw	r22, r20
     4a4:	62 2b       	or	r22, r18
     4a6:	6b bb       	out	0x1b, r22	; 27
     4a8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     4aa:	2b b3       	in	r18, 0x1b	; 27
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	ac 01       	movw	r20, r24
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_vconnectpullup+0x4a>
     4b4:	44 0f       	add	r20, r20
     4b6:	55 1f       	adc	r21, r21
     4b8:	6a 95       	dec	r22
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_vconnectpullup+0x46>
     4bc:	ba 01       	movw	r22, r20
     4be:	60 95       	com	r22
     4c0:	62 23       	and	r22, r18
     4c2:	6b bb       	out	0x1b, r22	; 27
     4c4:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
     4c6:	41 30       	cpi	r20, 0x01	; 1
     4c8:	69 f4       	brne	.+26     	; 0x4e4 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
     4ca:	28 b3       	in	r18, 0x18	; 24
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	ac 01       	movw	r20, r24
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_vconnectpullup+0x6a>
     4d4:	44 0f       	add	r20, r20
     4d6:	55 1f       	adc	r21, r21
     4d8:	6a 95       	dec	r22
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_vconnectpullup+0x66>
     4dc:	ba 01       	movw	r22, r20
     4de:	62 2b       	or	r22, r18
     4e0:	68 bb       	out	0x18, r22	; 24
     4e2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     4e4:	28 b3       	in	r18, 0x18	; 24
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	ac 01       	movw	r20, r24
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_vconnectpullup+0x84>
     4ee:	44 0f       	add	r20, r20
     4f0:	55 1f       	adc	r21, r21
     4f2:	6a 95       	dec	r22
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_vconnectpullup+0x80>
     4f6:	ba 01       	movw	r22, r20
     4f8:	60 95       	com	r22
     4fa:	62 23       	and	r22, r18
     4fc:	68 bb       	out	0x18, r22	; 24
     4fe:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
     500:	41 30       	cpi	r20, 0x01	; 1
     502:	69 f4       	brne	.+26     	; 0x51e <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
     504:	25 b3       	in	r18, 0x15	; 21
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	ac 01       	movw	r20, r24
     50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_vconnectpullup+0xa4>
     50e:	44 0f       	add	r20, r20
     510:	55 1f       	adc	r21, r21
     512:	6a 95       	dec	r22
     514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_vconnectpullup+0xa0>
     516:	ba 01       	movw	r22, r20
     518:	62 2b       	or	r22, r18
     51a:	65 bb       	out	0x15, r22	; 21
     51c:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     51e:	25 b3       	in	r18, 0x15	; 21
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	ac 01       	movw	r20, r24
     526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_vconnectpullup+0xbe>
     528:	44 0f       	add	r20, r20
     52a:	55 1f       	adc	r21, r21
     52c:	6a 95       	dec	r22
     52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_vconnectpullup+0xba>
     530:	ba 01       	movw	r22, r20
     532:	60 95       	com	r22
     534:	62 23       	and	r22, r18
     536:	65 bb       	out	0x15, r22	; 21
     538:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
     53a:	41 30       	cpi	r20, 0x01	; 1
     53c:	69 f4       	brne	.+26     	; 0x558 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
     53e:	22 b3       	in	r18, 0x12	; 18
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	ac 01       	movw	r20, r24
     546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_vconnectpullup+0xde>
     548:	44 0f       	add	r20, r20
     54a:	55 1f       	adc	r21, r21
     54c:	6a 95       	dec	r22
     54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_vconnectpullup+0xda>
     550:	ba 01       	movw	r22, r20
     552:	62 2b       	or	r22, r18
     554:	62 bb       	out	0x12, r22	; 18
     556:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     558:	22 b3       	in	r18, 0x12	; 18
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	ac 01       	movw	r20, r24
     560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_vconnectpullup+0xf8>
     562:	44 0f       	add	r20, r20
     564:	55 1f       	adc	r21, r21
     566:	6a 95       	dec	r22
     568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_vconnectpullup+0xf4>
     56a:	ba 01       	movw	r22, r20
     56c:	60 95       	com	r22
     56e:	62 23       	and	r22, r18
     570:	62 bb       	out	0x12, r22	; 18
     572:	08 95       	ret

00000574 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     574:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     576:	82 34       	cpi	r24, 0x42	; 66
     578:	81 f0       	breq	.+32     	; 0x59a <write_low_nibble+0x26>
     57a:	83 34       	cpi	r24, 0x43	; 67
     57c:	18 f4       	brcc	.+6      	; 0x584 <write_low_nibble+0x10>
     57e:	81 34       	cpi	r24, 0x41	; 65
     580:	f1 f4       	brne	.+60     	; 0x5be <write_low_nibble+0x4a>
     582:	05 c0       	rjmp	.+10     	; 0x58e <write_low_nibble+0x1a>
     584:	83 34       	cpi	r24, 0x43	; 67
     586:	79 f0       	breq	.+30     	; 0x5a6 <write_low_nibble+0x32>
     588:	84 34       	cpi	r24, 0x44	; 68
     58a:	c9 f4       	brne	.+50     	; 0x5be <write_low_nibble+0x4a>
     58c:	12 c0       	rjmp	.+36     	; 0x5b2 <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     58e:	8b b3       	in	r24, 0x1b	; 27
     590:	80 7f       	andi	r24, 0xF0	; 240
     592:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     594:	8b b3       	in	r24, 0x1b	; 27
     596:	86 2b       	or	r24, r22
     598:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     59a:	88 b3       	in	r24, 0x18	; 24
     59c:	80 7f       	andi	r24, 0xF0	; 240
     59e:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     5a0:	88 b3       	in	r24, 0x18	; 24
     5a2:	86 2b       	or	r24, r22
     5a4:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     5a6:	85 b3       	in	r24, 0x15	; 21
     5a8:	80 7f       	andi	r24, 0xF0	; 240
     5aa:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5ac:	85 b3       	in	r24, 0x15	; 21
     5ae:	86 2b       	or	r24, r22
     5b0:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     5b2:	82 b3       	in	r24, 0x12	; 18
     5b4:	80 7f       	andi	r24, 0xF0	; 240
     5b6:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     5b8:	82 b3       	in	r24, 0x12	; 18
     5ba:	68 2b       	or	r22, r24
     5bc:	62 bb       	out	0x12, r22	; 18
     5be:	08 95       	ret

000005c0 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     5c0:	62 95       	swap	r22
     5c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     5c4:	82 34       	cpi	r24, 0x42	; 66
     5c6:	81 f0       	breq	.+32     	; 0x5e8 <write_high_nibble+0x28>
     5c8:	83 34       	cpi	r24, 0x43	; 67
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <write_high_nibble+0x12>
     5cc:	81 34       	cpi	r24, 0x41	; 65
     5ce:	f1 f4       	brne	.+60     	; 0x60c <write_high_nibble+0x4c>
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <write_high_nibble+0x1c>
     5d2:	83 34       	cpi	r24, 0x43	; 67
     5d4:	79 f0       	breq	.+30     	; 0x5f4 <write_high_nibble+0x34>
     5d6:	84 34       	cpi	r24, 0x44	; 68
     5d8:	c9 f4       	brne	.+50     	; 0x60c <write_high_nibble+0x4c>
     5da:	12 c0       	rjmp	.+36     	; 0x600 <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     5dc:	8b b3       	in	r24, 0x1b	; 27
     5de:	8f 70       	andi	r24, 0x0F	; 15
     5e0:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     5e2:	8b b3       	in	r24, 0x1b	; 27
     5e4:	86 2b       	or	r24, r22
     5e6:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     5e8:	88 b3       	in	r24, 0x18	; 24
     5ea:	8f 70       	andi	r24, 0x0F	; 15
     5ec:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     5ee:	88 b3       	in	r24, 0x18	; 24
     5f0:	86 2b       	or	r24, r22
     5f2:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     5f4:	85 b3       	in	r24, 0x15	; 21
     5f6:	8f 70       	andi	r24, 0x0F	; 15
     5f8:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5fa:	85 b3       	in	r24, 0x15	; 21
     5fc:	86 2b       	or	r24, r22
     5fe:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     600:	82 b3       	in	r24, 0x12	; 18
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     606:	82 b3       	in	r24, 0x12	; 18
     608:	68 2b       	or	r22, r24
     60a:	62 bb       	out	0x12, r22	; 18
     60c:	08 95       	ret

0000060e <EEPROM_write>:
#include"std_macros.h"
#include<avr/io.h>

void EEPROM_write(unsigned short address,unsigned char data)
{
	EEARL = (char) address;
     60e:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char)(address>>8);
     610:	9f bb       	out	0x1f, r25	; 31
	EEDR = data;
     612:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     614:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
     616:	e1 9a       	sbi	0x1c, 1	; 28
	while(1 == READ_BIT(EECR,EEWE));
     618:	e1 99       	sbic	0x1c, 1	; 28
     61a:	fe cf       	rjmp	.-4      	; 0x618 <EEPROM_write+0xa>
	
}
     61c:	08 95       	ret

0000061e <EEPROM_read>:
char EEPROM_read(unsigned short address)
{
	EEARL = (char) address;
     61e:	8e bb       	out	0x1e, r24	; 30
	EEARH = (char) (address>>8);
     620:	9f bb       	out	0x1f, r25	; 31
	SET_BIT(EECR,EERE);
     622:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
     624:	8d b3       	in	r24, 0x1d	; 29
     626:	08 95       	ret

00000628 <keypad_vInit>:
#include "keypad_driver.h"
 void keypad_vInit()
 {
	 DIO_vsetPINDir('D',0,1);
     628:	84 e4       	ldi	r24, 0x44	; 68
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	41 e0       	ldi	r20, 0x01	; 1
     62e:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
     632:	84 e4       	ldi	r24, 0x44	; 68
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
     63c:	84 e4       	ldi	r24, 0x44	; 68
     63e:	62 e0       	ldi	r22, 0x02	; 2
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
     646:	84 e4       	ldi	r24, 0x44	; 68
     648:	63 e0       	ldi	r22, 0x03	; 3
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
     650:	84 e4       	ldi	r24, 0x44	; 68
     652:	64 e0       	ldi	r22, 0x04	; 4
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
     65a:	84 e4       	ldi	r24, 0x44	; 68
     65c:	65 e0       	ldi	r22, 0x05	; 5
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
     664:	84 e4       	ldi	r24, 0x44	; 68
     666:	66 e0       	ldi	r22, 0x06	; 6
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
     66e:	84 e4       	ldi	r24, 0x44	; 68
     670:	67 e0       	ldi	r22, 0x07	; 7
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
     678:	84 e4       	ldi	r24, 0x44	; 68
     67a:	64 e0       	ldi	r22, 0x04	; 4
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
     682:	84 e4       	ldi	r24, 0x44	; 68
     684:	65 e0       	ldi	r22, 0x05	; 5
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
     68c:	84 e4       	ldi	r24, 0x44	; 68
     68e:	66 e0       	ldi	r22, 0x06	; 6
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
     696:	84 e4       	ldi	r24, 0x44	; 68
     698:	67 e0       	ldi	r22, 0x07	; 7
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_vconnectpullup>
	  
 }
     6a0:	08 95       	ret

000006a2 <keypad_u8check_press>:
 char keypad_u8check_press()
 {
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	60 97       	sbiw	r28, 0x10	; 16
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     6ba:	de 01       	movw	r26, r28
     6bc:	11 96       	adiw	r26, 0x01	; 1
     6be:	e0 e6       	ldi	r30, 0x60	; 96
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 e1       	ldi	r24, 0x10	; 16
     6c4:	01 90       	ld	r0, Z+
     6c6:	0d 92       	st	X+, r0
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <keypad_u8check_press+0x22>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     6cc:	00 e0       	ldi	r16, 0x00	; 0
	 {
		DIO_write('D',0,1);
     6ce:	84 e4       	ldi	r24, 0x44	; 68
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	41 e0       	ldi	r20, 0x01	; 1
     6d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
		DIO_write('D',1,1);
     6d8:	84 e4       	ldi	r24, 0x44	; 68
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
		DIO_write('D',2,1);
     6e2:	84 e4       	ldi	r24, 0x44	; 68
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
		DIO_write('D',3,1);
     6ec:	84 e4       	ldi	r24, 0x44	; 68
     6ee:	63 e0       	ldi	r22, 0x03	; 3
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
		DIO_write('D',row,0);
     6f6:	84 e4       	ldi	r24, 0x44	; 68
     6f8:	60 2f       	mov	r22, r16
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
     700:	10 e0       	ldi	r17, 0x00	; 0
	 DIO_vconnectpullup('D',5,1);
	 DIO_vconnectpullup('D',6,1);
	 DIO_vconnectpullup('D',7,1);
	  
 }
 char keypad_u8check_press()
     702:	61 2f       	mov	r22, r17
     704:	6c 5f       	subi	r22, 0xFC	; 252
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
		{
			x=DIO_u8read('D',(coloumn+4));
     706:	84 e4       	ldi	r24, 0x44	; 68
     708:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_u8read>
			if(x==0)
     70c:	88 23       	and	r24, r24
     70e:	61 f4       	brne	.+24     	; 0x728 <keypad_u8check_press+0x86>
			 {
				 returnval=arr[row][coloumn];
     710:	e0 2f       	mov	r30, r16
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	ee 0f       	add	r30, r30
     71a:	ff 1f       	adc	r31, r31
     71c:	e1 0f       	add	r30, r17
     71e:	f1 1d       	adc	r31, r1
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	81 81       	ldd	r24, Z+1	; 0x01
     726:	04 c0       	rjmp	.+8      	; 0x730 <keypad_u8check_press+0x8e>
		DIO_write('D',1,1);
		DIO_write('D',2,1);
		DIO_write('D',3,1);
		DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
     728:	1f 5f       	subi	r17, 0xFF	; 255
     72a:	14 30       	cpi	r17, 0x04	; 4
     72c:	51 f7       	brne	.-44     	; 0x702 <keypad_u8check_press+0x60>
     72e:	0b c0       	rjmp	.+22     	; 0x746 <keypad_u8check_press+0xa4>
		{
			break;
		}
	}	 
	 return returnval ;	 
     730:	60 96       	adiw	r28, 0x10	; 16
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     746:	0f 5f       	subi	r16, 0xFF	; 255
     748:	04 30       	cpi	r16, 0x04	; 4
     74a:	09 f6       	brne	.-126    	; 0x6ce <keypad_u8check_press+0x2c>
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	f0 cf       	rjmp	.-32     	; 0x730 <keypad_u8check_press+0x8e>

00000750 <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
     750:	82 e4       	ldi	r24, 0x42	; 66
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75a:	8f e9       	ldi	r24, 0x9F	; 159
     75c:	9f e0       	ldi	r25, 0x0F	; 15
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <send_falling_edge+0xe>
     762:	00 c0       	rjmp	.+0      	; 0x764 <send_falling_edge+0x14>
     764:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
     766:	82 e4       	ldi	r24, 0x42	; 66
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
     770:	8f e9       	ldi	r24, 0x9F	; 159
     772:	9f e0       	ldi	r25, 0x0F	; 15
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <send_falling_edge+0x24>
     778:	00 c0       	rjmp	.+0      	; 0x77a <send_falling_edge+0x2a>
     77a:	00 00       	nop
	_delay_ms(2);
}
     77c:	08 95       	ret

0000077e <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
     77e:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
     780:	81 e4       	ldi	r24, 0x41	; 65
     782:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_write_port>
	DIO_write('B',RS,0);
     786:	82 e4       	ldi	r24, 0x42	; 66
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	send_falling_edge();
     790:	0e 94 a8 03 	call	0x750	; 0x750 <send_falling_edge>
     794:	8f ec       	ldi	r24, 0xCF	; 207
     796:	97 e0       	ldi	r25, 0x07	; 7
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <LCD_vSend_cmd+0x1a>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <LCD_vSend_cmd+0x20>
     79e:	00 00       	nop
	write_high_nibble('A',cmd);
	DIO_write('A',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
     7a0:	08 95       	ret

000007a2 <LCD_vInit>:
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	92 e5       	ldi	r25, 0x52	; 82
     7a6:	a7 e0       	ldi	r26, 0x07	; 7
     7a8:	81 50       	subi	r24, 0x01	; 1
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	a0 40       	sbci	r26, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <LCD_vInit+0x6>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <LCD_vInit+0x10>
     7b2:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(300);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
     7b4:	81 e4       	ldi	r24, 0x41	; 65
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
     7be:	81 e4       	ldi	r24, 0x41	; 65
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
     7c8:	81 e4       	ldi	r24, 0x41	; 65
     7ca:	62 e0       	ldi	r22, 0x02	; 2
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
     7d2:	81 e4       	ldi	r24, 0x41	; 65
     7d4:	63 e0       	ldi	r22, 0x03	; 3
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
     7dc:	81 e4       	ldi	r24, 0x41	; 65
     7de:	64 e0       	ldi	r22, 0x04	; 4
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     7e6:	81 e4       	ldi	r24, 0x41	; 65
     7e8:	65 e0       	ldi	r22, 0x05	; 5
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     7f0:	81 e4       	ldi	r24, 0x41	; 65
     7f2:	66 e0       	ldi	r22, 0x06	; 6
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     7fa:	81 e4       	ldi	r24, 0x41	; 65
     7fc:	67 e0       	ldi	r22, 0x07	; 7
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
     804:	82 e4       	ldi	r24, 0x42	; 66
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
     80e:	82 e4       	ldi	r24, 0x42	; 66
     810:	62 e0       	ldi	r22, 0x02	; 2
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
     818:	82 e4       	ldi	r24, 0x42	; 66
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
     822:	82 e4       	ldi	r24, 0x42	; 66
     824:	62 e0       	ldi	r22, 0x02	; 2
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
     82c:	88 e3       	ldi	r24, 0x38	; 56
     82e:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vSend_cmd>
     832:	af ec       	ldi	r26, 0xCF	; 207
     834:	b7 e0       	ldi	r27, 0x07	; 7
     836:	11 97       	sbiw	r26, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_vInit+0x94>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_vInit+0x9a>
     83c:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_OFF_DISPLAY_ON);//display on cursor on
     83e:	8c e0       	ldi	r24, 0x0C	; 12
     840:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vSend_cmd>
     844:	8f ec       	ldi	r24, 0xCF	; 207
     846:	97 e0       	ldi	r25, 0x07	; 7
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_vInit+0xa6>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_vInit+0xac>
     84e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vSend_cmd>
     856:	af e1       	ldi	r26, 0x1F	; 31
     858:	be e4       	ldi	r27, 0x4E	; 78
     85a:	11 97       	sbiw	r26, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_vInit+0xb8>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
     862:	86 e0       	ldi	r24, 0x06	; 6
     864:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vSend_cmd>
     868:	8f ec       	ldi	r24, 0xCF	; 207
     86a:	97 e0       	ldi	r25, 0x07	; 7
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
     874:	08 95       	ret

00000876 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
     876:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',data);
     878:	81 e4       	ldi	r24, 0x41	; 65
     87a:	0e 94 0d 02 	call	0x41a	; 0x41a <DIO_write_port>
	DIO_write('B',RS,1);
     87e:	82 e4       	ldi	r24, 0x42	; 66
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	send_falling_edge();
     888:	0e 94 a8 03 	call	0x750	; 0x750 <send_falling_edge>
     88c:	8f ec       	ldi	r24, 0xCF	; 207
     88e:	97 e0       	ldi	r25, 0x07	; 7
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	f1 f7       	brne	.-4      	; 0x890 <LCD_vSend_char+0x1a>
     894:	00 c0       	rjmp	.+0      	; 0x896 <LCD_vSend_char+0x20>
     896:	00 00       	nop
	write_high_nibble('A',data);
	DIO_write('A',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
     898:	08 95       	ret

0000089a <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     8a0:	88 81       	ld	r24, Y
     8a2:	88 23       	and	r24, r24
     8a4:	31 f0       	breq	.+12     	; 0x8b2 <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
     8a6:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     8a8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     8ac:	89 91       	ld	r24, Y+
     8ae:	88 23       	and	r24, r24
     8b0:	d9 f7       	brne	.-10     	; 0x8a8 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vSend_cmd>
     8be:	8f e1       	ldi	r24, 0x1F	; 31
     8c0:	9e e4       	ldi	r25, 0x4E	; 78
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <LCD_clearscreen+0xa>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <LCD_clearscreen+0x10>
     8c8:	00 00       	nop
	_delay_ms(10);
}
     8ca:	08 95       	ret

000008cc <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     8cc:	28 2f       	mov	r18, r24
     8ce:	21 50       	subi	r18, 0x01	; 1
     8d0:	22 30       	cpi	r18, 0x02	; 2
     8d2:	70 f4       	brcc	.+28     	; 0x8f0 <LCD_movecursor+0x24>
     8d4:	61 31       	cpi	r22, 0x11	; 17
     8d6:	70 f4       	brcc	.+28     	; 0x8f4 <LCD_movecursor+0x28>
     8d8:	66 23       	and	r22, r22
     8da:	71 f0       	breq	.+28     	; 0x8f8 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	19 f4       	brne	.+6      	; 0x8e6 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     8e0:	96 2f       	mov	r25, r22
     8e2:	91 58       	subi	r25, 0x81	; 129
     8e4:	0a c0       	rjmp	.+20     	; 0x8fa <LCD_movecursor+0x2e>
	}
	else if (row==2)
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	41 f4       	brne	.+16     	; 0x8fa <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     8ea:	96 2f       	mov	r25, r22
     8ec:	91 54       	subi	r25, 0x41	; 65
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     8f0:	90 e8       	ldi	r25, 0x80	; 128
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <LCD_movecursor+0x2e>
     8f4:	90 e8       	ldi	r25, 0x80	; 128
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <LCD_movecursor+0x2e>
     8f8:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     8fa:	89 2f       	mov	r24, r25
     8fc:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vSend_cmd>
     900:	8f ec       	ldi	r24, 0xCF	; 207
     902:	97 e0       	ldi	r25, 0x07	; 7
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <LCD_movecursor+0x38>
     908:	00 c0       	rjmp	.+0      	; 0x90a <LCD_movecursor+0x3e>
     90a:	00 00       	nop
	_delay_ms(1);
}
     90c:	08 95       	ret

0000090e <LED_init>:
 */ 
#include"DIO.h"

void LED_init(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
}
     914:	08 95       	ret

00000916 <LED_on>:

void LED_on(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,1);
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	
}
     91c:	08 95       	ret

0000091e <LED_off>:
void LED_off(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,0);
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	
}
     924:	08 95       	ret

00000926 <LED_toggle>:
void LED_toggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_toggle(portname,pinnumber);
     926:	0e 94 b9 01 	call	0x372	; 0x372 <DIO_toggle>
}
     92a:	08 95       	ret

0000092c <LED_readstatus>:
unsigned char LED_readstatus(unsigned char portname,unsigned char pinnumber)
{
	return DIO_u8read(portname,pinnumber);
     92c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <DIO_u8read>
}
     930:	08 95       	ret

00000932 <main>:
char password[4] = {NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED};
int main(void)
{
	char status = '1';
	//Admin mode LED,Guest mode LED,Block mode LED (LED is active
	LED_init('C',0);
     932:	83 e4       	ldi	r24, 0x43	; 67
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 87 04 	call	0x90e	; 0x90e <LED_init>
	LED_init('C',1);
     93e:	83 e4       	ldi	r24, 0x43	; 67
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	0e 94 87 04 	call	0x90e	; 0x90e <LED_init>
	LED_init('C',2);
     94a:	83 e4       	ldi	r24, 0x43	; 67
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	0e 94 87 04 	call	0x90e	; 0x90e <LED_init>
	LCD_vInit();
     956:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_vInit>
	keypad_vInit();
     95a:	0e 94 14 03 	call	0x628	; 0x628 <keypad_vInit>
	ADC_vinit();
     95e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vinit>
	SPI_MasterInit();
     962:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <SPI_MasterInit>
	timer_CTC_init_interrupt();
     966:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <timer_CTC_init_interrupt>
	if(EEPROM_read(BLOCK_ENABLE) == 0x00)
     96a:	80 e1       	ldi	r24, 0x10	; 16
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 0f 03 	call	0x61e	; 0x61e <EEPROM_read>
     972:	88 23       	and	r24, r24
     974:	49 f5       	brne	.+82     	; 0x9c8 <main+0x96>
	{
		LED_on('C',2);
     976:	83 e4       	ldi	r24, 0x43	; 67
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 8b 04 	call	0x916	; 0x916 <LED_on>
		LCD_vSend_string("login blocked");
     982:	80 e7       	ldi	r24, 0x70	; 112
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
		LCD_movecursor(2,1);
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
		LCD_vSend_string("wait 20 seconds");
     992:	8e e7       	ldi	r24, 0x7E	; 126
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     99a:	8a ea       	ldi	r24, 0xAA	; 170
     99c:	96 ee       	ldi	r25, 0xE6	; 230
     99e:	a6 e9       	ldi	r26, 0x96	; 150
     9a0:	b1 e0       	ldi	r27, 0x01	; 1
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	a0 40       	sbci	r26, 0x00	; 0
     9a8:	b0 40       	sbci	r27, 0x00	; 0
     9aa:	d9 f7       	brne	.-10     	; 0x9a2 <main+0x70>
     9ac:	00 00       	nop
		_delay_ms(20000);
		LCD_clearscreen();
     9ae:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
		EEPROM_write(BLOCK_ENABLE,0xFF);
     9b2:	80 e1       	ldi	r24, 0x10	; 16
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	6f ef       	ldi	r22, 0xFF	; 255
     9b8:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_write>
		LED_off('C',2);
     9bc:	83 e4       	ldi	r24, 0x43	; 67
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	62 e0       	ldi	r22, 0x02	; 2
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	0e 94 8f 04 	call	0x91e	; 0x91e <LED_off>
	}
	LCD_vSend_string("Welcome to Smart");
     9c8:	8e e8       	ldi	r24, 0x8E	; 142
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
	LCD_movecursor(2,1);
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
	LCD_vSend_string("home system");
     9d8:	8f e9       	ldi	r24, 0x9F	; 159
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	96 e1       	ldi	r25, 0x16	; 22
     9e4:	a1 e1       	ldi	r26, 0x11	; 17
     9e6:	81 50       	subi	r24, 0x01	; 1
     9e8:	90 40       	sbci	r25, 0x00	; 0
     9ea:	a0 40       	sbci	r26, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <main+0xb4>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <main+0xbe>
     9f0:	00 00       	nop
	_delay_ms(700);
	start:
	modeentered = 0;
     9f2:	10 92 70 02 	sts	0x0270, r1
	counter=1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 73 02 	sts	0x0273, r25
     9fe:	80 93 72 02 	sts	0x0272, r24
	LCD_clearscreen();
     a02:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	92 e5       	ldi	r25, 0x52	; 82
     a0a:	a7 e0       	ldi	r26, 0x07	; 7
     a0c:	81 50       	subi	r24, 0x01	; 1
     a0e:	90 40       	sbci	r25, 0x00	; 0
     a10:	a0 40       	sbci	r26, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <main+0xda>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <main+0xe4>
     a16:	00 00       	nop
    {
		if(NOTSET == EEPROM_read(ADMIN_AND_GUEST_SET))
		{
			LCD_vSend_string("Login for");
			LCD_movecursor(2,1);
			LCD_vSend_string("first time");
     a18:	0f 2e       	mov	r0, r31
     a1a:	f5 eb       	ldi	r31, 0xB5	; 181
     a1c:	2f 2e       	mov	r2, r31
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	3f 2e       	mov	r3, r31
     a22:	f0 2d       	mov	r31, r0
				LCD_movecursor(2,12+passwordindex);
				LCD_vSend_char('*');
				EEPROM_write(ADMIN_PASSWORD_OFFSET_Location + passwordindex,password[passwordindex]);
			}
			LCD_clearscreen();
			LCD_vSend_string("Pass Saved");
     a24:	0f 2e       	mov	r0, r31
     a26:	fb ed       	ldi	r31, 0xDB	; 219
     a28:	8f 2e       	mov	r8, r31
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	9f 2e       	mov	r9, r31
     a2e:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			LCD_clearscreen();
		}
		else
		{
			LCD_vSend_string("Select mode :");
     a30:	01 e0       	ldi	r16, 0x01	; 1
     a32:	11 e0       	ldi	r17, 0x01	; 1
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Admin 1:Guest");
     a34:	0f 2e       	mov	r0, r31
     a36:	ff e0       	ldi	r31, 0x0F	; 15
     a38:	ef 2e       	mov	r14, r31
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
				}
				if(0 == guestflag | 0 == adminflag)
				{
					triesleft--;
					LCD_clearscreen();
					LCD_vSend_string("Wrong pass");
     a40:	0f 2e       	mov	r0, r31
     a42:	fe e3       	ldi	r31, 0x3E	; 62
     a44:	cf 2e       	mov	r12, r31
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	df 2e       	mov	r13, r31
     a4a:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("Tries left:");
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f9 e4       	ldi	r31, 0x49	; 73
     a50:	af 2e       	mov	r10, r31
     a52:	f2 e0       	ldi	r31, 0x02	; 2
     a54:	bf 2e       	mov	r11, r31
     a56:	f0 2d       	mov	r31, r0
					guestflag = adminflag = 1;
					if(0 == triesleft)
					{
						EEPROM_write(BLOCK_ENABLE,0x00);
						LED_on('C',2);
						LCD_vSend_string("login blocked");
     a58:	0f 2e       	mov	r0, r31
     a5a:	f0 e7       	ldi	r31, 0x70	; 112
     a5c:	6f 2e       	mov	r6, r31
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	7f 2e       	mov	r7, r31
     a62:	f0 2d       	mov	r31, r0
						LCD_movecursor(2,1);
						LCD_vSend_string("wait 20 seconds");
     a64:	0f 2e       	mov	r0, r31
     a66:	fe e7       	ldi	r31, 0x7E	; 126
     a68:	4f 2e       	mov	r4, r31
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	5f 2e       	mov	r5, r31
     a6e:	f0 2d       	mov	r31, r0
	LCD_clearscreen();
	_delay_ms(300);

    while(1)
    {
		if(NOTSET == EEPROM_read(ADMIN_AND_GUEST_SET))
     a70:	80 e2       	ldi	r24, 0x20	; 32
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 0f 03 	call	0x61e	; 0x61e <EEPROM_read>
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	09 f0       	breq	.+2      	; 0xa7e <main+0x14c>
     a7c:	e9 c0       	rjmp	.+466    	; 0xc50 <main+0x31e>
		{
			LCD_vSend_string("Login for");
     a7e:	8b ea       	ldi	r24, 0xAB	; 171
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			LCD_movecursor(2,1);
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
			LCD_vSend_string("first time");
     a8e:	c1 01       	movw	r24, r2
     a90:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	96 e1       	ldi	r25, 0x16	; 22
     a98:	a1 e1       	ldi	r26, 0x11	; 17
     a9a:	81 50       	subi	r24, 0x01	; 1
     a9c:	90 40       	sbci	r25, 0x00	; 0
     a9e:	a0 40       	sbci	r26, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <main+0x168>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <main+0x172>
     aa4:	00 00       	nop
			_delay_ms(700);
			LCD_clearscreen();
     aa6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
			LCD_vSend_string("Set Admin pass");
     aaa:	80 ec       	ldi	r24, 0xC0	; 192
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			LCD_movecursor(2,1);
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
			LCD_vSend_string("Admin pass:");
     aba:	8f ec       	ldi	r24, 0xCF	; 207
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			for(passwordindex = 0;passwordindex<4;passwordindex++)
     ac2:	10 92 71 02 	sts	0x0271, r1
			{
				do{
					password[passwordindex] = keypad_u8check_press();
     ac6:	c0 91 71 02 	lds	r28, 0x0271
     aca:	d0 e0       	ldi	r29, 0x00	; 0
     acc:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     ad0:	fe 01       	movw	r30, r28
     ad2:	eb 59       	subi	r30, 0x9B	; 155
     ad4:	fd 4f       	sbci	r31, 0xFD	; 253
     ad6:	80 83       	st	Z, r24
				}while(NOTPRESSED == password[passwordindex]);
     ad8:	80 91 71 02 	lds	r24, 0x0271
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	8b 59       	subi	r24, 0x9B	; 155
     ae0:	9d 4f       	sbci	r25, 0xFD	; 253
     ae2:	dc 01       	movw	r26, r24
     ae4:	8c 91       	ld	r24, X
     ae6:	8f 3f       	cpi	r24, 0xFF	; 255
     ae8:	71 f3       	breq	.-36     	; 0xac6 <main+0x194>
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	95 ed       	ldi	r25, 0xD5	; 213
     aee:	a6 e0       	ldi	r26, 0x06	; 6
     af0:	81 50       	subi	r24, 0x01	; 1
     af2:	90 40       	sbci	r25, 0x00	; 0
     af4:	a0 40       	sbci	r26, 0x00	; 0
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <main+0x1be>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <main+0x1c8>
     afa:	00 00       	nop
				_delay_ms(280);
				LCD_vSend_char(password[passwordindex]);
     afc:	80 91 71 02 	lds	r24, 0x0271
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	8b 59       	subi	r24, 0x9B	; 155
     b04:	9d 4f       	sbci	r25, 0xFD	; 253
     b06:	dc 01       	movw	r26, r24
     b08:	8c 91       	ld	r24, X
     b0a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	93 ec       	ldi	r25, 0xC3	; 195
     b12:	a9 e0       	ldi	r26, 0x09	; 9
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	a0 40       	sbci	r26, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <main+0x1e2>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <main+0x1ec>
     b1e:	00 00       	nop
				_delay_ms(400);
				LCD_movecursor(2,12+passwordindex);
     b20:	60 91 71 02 	lds	r22, 0x0271
     b24:	64 5f       	subi	r22, 0xF4	; 244
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
				LCD_vSend_char('*');
     b2c:	8a e2       	ldi	r24, 0x2A	; 42
     b2e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
				EEPROM_write(ADMIN_PASSWORD_OFFSET_Location + passwordindex,password[passwordindex]);
     b32:	80 91 71 02 	lds	r24, 0x0271
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	2b 59       	subi	r18, 0x9B	; 155
     b3c:	3d 4f       	sbci	r19, 0xFD	; 253
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	d9 01       	movw	r26, r18
     b42:	6c 91       	ld	r22, X
     b44:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_write>
			_delay_ms(700);
			LCD_clearscreen();
			LCD_vSend_string("Set Admin pass");
			LCD_movecursor(2,1);
			LCD_vSend_string("Admin pass:");
			for(passwordindex = 0;passwordindex<4;passwordindex++)
     b48:	80 91 71 02 	lds	r24, 0x0271
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 71 02 	sts	0x0271, r24
     b52:	84 30       	cpi	r24, 0x04	; 4
     b54:	08 f4       	brcc	.+2      	; 0xb58 <main+0x226>
     b56:	b7 cf       	rjmp	.-146    	; 0xac6 <main+0x194>
				_delay_ms(400);
				LCD_movecursor(2,12+passwordindex);
				LCD_vSend_char('*');
				EEPROM_write(ADMIN_PASSWORD_OFFSET_Location + passwordindex,password[passwordindex]);
			}
			LCD_clearscreen();
     b58:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
			LCD_vSend_string("Pass Saved");
     b5c:	c4 01       	movw	r24, r8
     b5e:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	91 ee       	ldi	r25, 0xE1	; 225
     b66:	a4 e0       	ldi	r26, 0x04	; 4
     b68:	81 50       	subi	r24, 0x01	; 1
     b6a:	90 40       	sbci	r25, 0x00	; 0
     b6c:	a0 40       	sbci	r26, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <main+0x236>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <main+0x240>
     b72:	00 00       	nop
			_delay_ms(200);
			LCD_clearscreen();
     b74:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
			LCD_vSend_string("Set Guest pass");
     b78:	86 ee       	ldi	r24, 0xE6	; 230
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			LCD_movecursor(2,1);
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
			LCD_vSend_string("Guest pass:");
     b88:	85 ef       	ldi	r24, 0xF5	; 245
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			for(passwordindex = 0;passwordindex<4;passwordindex++)
     b90:	10 92 71 02 	sts	0x0271, r1
			{
				
				do{
					password[passwordindex] = keypad_u8check_press();
     b94:	c0 91 71 02 	lds	r28, 0x0271
     b98:	d0 e0       	ldi	r29, 0x00	; 0
     b9a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     b9e:	fe 01       	movw	r30, r28
     ba0:	eb 59       	subi	r30, 0x9B	; 155
     ba2:	fd 4f       	sbci	r31, 0xFD	; 253
     ba4:	80 83       	st	Z, r24
				}while(NOTPRESSED == password[passwordindex]);
     ba6:	80 91 71 02 	lds	r24, 0x0271
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	8b 59       	subi	r24, 0x9B	; 155
     bae:	9d 4f       	sbci	r25, 0xFD	; 253
     bb0:	dc 01       	movw	r26, r24
     bb2:	8c 91       	ld	r24, X
     bb4:	8f 3f       	cpi	r24, 0xFF	; 255
     bb6:	71 f3       	breq	.-36     	; 0xb94 <main+0x262>
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	95 ed       	ldi	r25, 0xD5	; 213
     bbc:	a6 e0       	ldi	r26, 0x06	; 6
     bbe:	81 50       	subi	r24, 0x01	; 1
     bc0:	90 40       	sbci	r25, 0x00	; 0
     bc2:	a0 40       	sbci	r26, 0x00	; 0
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <main+0x28c>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <main+0x296>
     bc8:	00 00       	nop
				_delay_ms(280);
				LCD_vSend_char(password[passwordindex]);
     bca:	80 91 71 02 	lds	r24, 0x0271
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	8b 59       	subi	r24, 0x9B	; 155
     bd2:	9d 4f       	sbci	r25, 0xFD	; 253
     bd4:	dc 01       	movw	r26, r24
     bd6:	8c 91       	ld	r24, X
     bd8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	93 ec       	ldi	r25, 0xC3	; 195
     be0:	a9 e0       	ldi	r26, 0x09	; 9
     be2:	81 50       	subi	r24, 0x01	; 1
     be4:	90 40       	sbci	r25, 0x00	; 0
     be6:	a0 40       	sbci	r26, 0x00	; 0
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <main+0x2b0>
     bea:	00 c0       	rjmp	.+0      	; 0xbec <main+0x2ba>
     bec:	00 00       	nop
				_delay_ms(400);
				LCD_movecursor(2,12+passwordindex);
     bee:	60 91 71 02 	lds	r22, 0x0271
     bf2:	64 5f       	subi	r22, 0xF4	; 244
     bf4:	82 e0       	ldi	r24, 0x02	; 2
     bf6:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
				LCD_vSend_char('*');
     bfa:	8a e2       	ldi	r24, 0x2A	; 42
     bfc:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
				EEPROM_write(Guest_PASSWORD_OFFSET_Location + passwordindex,password[passwordindex]);
     c00:	80 91 71 02 	lds	r24, 0x0271
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	fc 01       	movw	r30, r24
     c08:	eb 59       	subi	r30, 0x9B	; 155
     c0a:	fd 4f       	sbci	r31, 0xFD	; 253
     c0c:	04 96       	adiw	r24, 0x04	; 4
     c0e:	60 81       	ld	r22, Z
     c10:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_write>
			_delay_ms(200);
			LCD_clearscreen();
			LCD_vSend_string("Set Guest pass");
			LCD_movecursor(2,1);
			LCD_vSend_string("Guest pass:");
			for(passwordindex = 0;passwordindex<4;passwordindex++)
     c14:	80 91 71 02 	lds	r24, 0x0271
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 71 02 	sts	0x0271, r24
     c1e:	84 30       	cpi	r24, 0x04	; 4
     c20:	08 f4       	brcc	.+2      	; 0xc24 <main+0x2f2>
     c22:	b8 cf       	rjmp	.-144    	; 0xb94 <main+0x262>
				_delay_ms(400);
				LCD_movecursor(2,12+passwordindex);
				LCD_vSend_char('*');
				EEPROM_write(Guest_PASSWORD_OFFSET_Location + passwordindex,password[passwordindex]);
			}
			EEPROM_write(ADMIN_AND_GUEST_SET,0x00);
     c24:	80 e2       	ldi	r24, 0x20	; 32
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_write>
			LCD_clearscreen();
     c2e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
			LCD_vSend_string("Pass Saved");
     c32:	c4 01       	movw	r24, r8
     c34:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	91 ee       	ldi	r25, 0xE1	; 225
     c3c:	a4 e0       	ldi	r26, 0x04	; 4
     c3e:	81 50       	subi	r24, 0x01	; 1
     c40:	90 40       	sbci	r25, 0x00	; 0
     c42:	a0 40       	sbci	r26, 0x00	; 0
     c44:	e1 f7       	brne	.-8      	; 0xc3e <main+0x30c>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <main+0x316>
     c48:	00 00       	nop
			_delay_ms(200);
			LCD_clearscreen();
     c4a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
     c4e:	10 cf       	rjmp	.-480    	; 0xa70 <main+0x13e>
		}
		else
		{
			LCD_vSend_string("Select mode :");
     c50:	c8 01       	movw	r24, r16
     c52:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			LCD_movecursor(2,1);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
			LCD_vSend_string("0:Admin 1:Guest");
     c5e:	c7 01       	movw	r24, r14
     c60:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			do{
				selection = keypad_u8check_press();
     c64:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     c68:	80 93 6e 02 	sts	0x026E, r24
			}while(NOTPRESSED == selection);
     c6c:	8f 3f       	cpi	r24, 0xFF	; 255
     c6e:	d1 f3       	breq	.-12     	; 0xc64 <main+0x332>
     c70:	8f e7       	ldi	r24, 0x7F	; 127
     c72:	9a e1       	ldi	r25, 0x1A	; 26
     c74:	a6 e0       	ldi	r26, 0x06	; 6
     c76:	81 50       	subi	r24, 0x01	; 1
     c78:	90 40       	sbci	r25, 0x00	; 0
     c7a:	a0 40       	sbci	r26, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <main+0x344>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <main+0x34e>
     c80:	00 00       	nop
			_delay_ms(250);
			LCD_clearscreen();
     c82:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
			if('0'== selection)
     c86:	80 91 6e 02 	lds	r24, 0x026E
     c8a:	80 33       	cpi	r24, 0x30	; 48
     c8c:	09 f0       	breq	.+2      	; 0xc90 <main+0x35e>
     c8e:	cd c3       	rjmp	.+1946   	; 0x142a <main+0xaf8>
			{
				LCD_vSend_string("Admin mode");
     c90:	8f e1       	ldi	r24, 0x1F	; 31
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
				LCD_movecursor(2,1);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
				LCD_vSend_string("Enter pass:");
     ca0:	8a e2       	ldi	r24, 0x2A	; 42
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
				for(passwordindex = 0;passwordindex<4;passwordindex++)
     ca8:	10 92 71 02 	sts	0x0271, r1
				{
					do{
						password[passwordindex] = keypad_u8check_press();
     cac:	c0 91 71 02 	lds	r28, 0x0271
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
     cb2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     cb6:	fe 01       	movw	r30, r28
     cb8:	eb 59       	subi	r30, 0x9B	; 155
     cba:	fd 4f       	sbci	r31, 0xFD	; 253
     cbc:	80 83       	st	Z, r24
					}while(NOTPRESSED == password[passwordindex]);
     cbe:	80 91 71 02 	lds	r24, 0x0271
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8b 59       	subi	r24, 0x9B	; 155
     cc6:	9d 4f       	sbci	r25, 0xFD	; 253
     cc8:	dc 01       	movw	r26, r24
     cca:	8c 91       	ld	r24, X
     ccc:	8f 3f       	cpi	r24, 0xFF	; 255
     cce:	71 f3       	breq	.-36     	; 0xcac <main+0x37a>
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	95 ed       	ldi	r25, 0xD5	; 213
     cd4:	a6 e0       	ldi	r26, 0x06	; 6
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	90 40       	sbci	r25, 0x00	; 0
     cda:	a0 40       	sbci	r26, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <main+0x3a4>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <main+0x3ae>
     ce0:	00 00       	nop
					_delay_ms(280);
					LCD_vSend_char(password[passwordindex]);
     ce2:	80 91 71 02 	lds	r24, 0x0271
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	8b 59       	subi	r24, 0x9B	; 155
     cea:	9d 4f       	sbci	r25, 0xFD	; 253
     cec:	dc 01       	movw	r26, r24
     cee:	8c 91       	ld	r24, X
     cf0:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	90 e7       	ldi	r25, 0x70	; 112
     cf8:	a2 e0       	ldi	r26, 0x02	; 2
     cfa:	81 50       	subi	r24, 0x01	; 1
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	a0 40       	sbci	r26, 0x00	; 0
     d00:	e1 f7       	brne	.-8      	; 0xcfa <main+0x3c8>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <main+0x3d2>
     d04:	00 00       	nop
					_delay_ms(100);
					LCD_movecursor(2,12+passwordindex);
     d06:	60 91 71 02 	lds	r22, 0x0271
     d0a:	64 5f       	subi	r22, 0xF4	; 244
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_char('*');
     d12:	8a e2       	ldi	r24, 0x2A	; 42
     d14:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
					if(EEPROM_read(ADMIN_PASSWORD_OFFSET_Location + passwordindex) != password[passwordindex])
     d18:	80 91 71 02 	lds	r24, 0x0271
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 0f 03 	call	0x61e	; 0x61e <EEPROM_read>
     d22:	90 91 71 02 	lds	r25, 0x0271
     d26:	29 2f       	mov	r18, r25
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	2b 59       	subi	r18, 0x9B	; 155
     d2c:	3d 4f       	sbci	r19, 0xFD	; 253
     d2e:	d9 01       	movw	r26, r18
     d30:	2c 91       	ld	r18, X
     d32:	82 17       	cp	r24, r18
     d34:	11 f0       	breq	.+4      	; 0xd3a <main+0x408>
					{
						adminflag = 0;
     d36:	10 92 6b 02 	sts	0x026B, r1
			if('0'== selection)
			{
				LCD_vSend_string("Admin mode");
				LCD_movecursor(2,1);
				LCD_vSend_string("Enter pass:");
				for(passwordindex = 0;passwordindex<4;passwordindex++)
     d3a:	9f 5f       	subi	r25, 0xFF	; 255
     d3c:	90 93 71 02 	sts	0x0271, r25
     d40:	94 30       	cpi	r25, 0x04	; 4
     d42:	08 f4       	brcc	.+2      	; 0xd46 <main+0x414>
     d44:	b3 cf       	rjmp	.-154    	; 0xcac <main+0x37a>
					{
						adminflag = 0;
					}
				}
				
				if(1 == adminflag)
     d46:	80 91 6b 02 	lds	r24, 0x026B
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <main+0x41e>
     d4e:	9c c5       	rjmp	.+2872   	; 0x1888 <main+0xf56>
				{
					LED_on('C',0);
     d50:	83 e4       	ldi	r24, 0x43	; 67
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	0e 94 8b 04 	call	0x916	; 0x916 <LED_on>
					TCNT0 = 0;
     d5c:	12 be       	out	0x32, r1	; 50
					modeentered = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 70 02 	sts	0x0270, r24
					LCD_clearscreen();
     d64:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
					LCD_vSend_string("Right pass");
     d68:	86 e3       	ldi	r24, 0x36	; 54
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
					LCD_movecursor(2,1);
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_string("Admin mode");
     d78:	8f e1       	ldi	r24, 0x1F	; 31
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	94 e3       	ldi	r25, 0x34	; 52
     d84:	ac e0       	ldi	r26, 0x0C	; 12
     d86:	81 50       	subi	r24, 0x01	; 1
     d88:	90 40       	sbci	r25, 0x00	; 0
     d8a:	a0 40       	sbci	r26, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <main+0x454>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <main+0x45e>
     d90:	00 00       	nop
					_delay_ms(500);
					LCD_clearscreen();
     d92:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
     d96:	81 e4       	ldi	r24, 0x41	; 65
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
					LCD_movecursor(2,1);
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_string("3:Room3 4:More");
     da6:	81 e5       	ldi	r24, 0x51	; 81
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							LCD_vSend_string("wrong input");
							_delay_ms(1000);
							LCD_clearscreen();
						}
						LCD_clearscreen();
						LCD_vSend_string("1:Room1 2:Room2");
     dae:	0f 2e       	mov	r0, r31
     db0:	f1 e4       	ldi	r31, 0x41	; 65
     db2:	4f 2e       	mov	r4, r31
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	5f 2e       	mov	r5, r31
     db8:	f0 2d       	mov	r31, r0
								_delay_ms(280);
								LCD_clearscreen();
								switch (selection)
								{
									case '1' :  
									LCD_vSend_string("Set temp.:--");
     dba:	0f 2e       	mov	r0, r31
     dbc:	fb ed       	ldi	r31, 0xDB	; 219
     dbe:	2f 2e       	mov	r2, r31
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	3f 2e       	mov	r3, r31
     dc4:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("3:Room3 4:More");
					while(1)
					{
						do{
							selection = keypad_u8check_press();
     dc6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     dca:	80 93 6e 02 	sts	0x026E, r24
							if(counter >= SESSION_TIME_OUTX100)
     dce:	20 91 72 02 	lds	r18, 0x0272
     dd2:	30 91 73 02 	lds	r19, 0x0273
     dd6:	97 e1       	ldi	r25, 0x17	; 23
     dd8:	20 37       	cpi	r18, 0x70	; 112
     dda:	39 07       	cpc	r19, r25
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <main+0x4ae>
     dde:	09 ce       	rjmp	.-1006   	; 0x9f2 <main+0xc0>
							{
								goto start;
							}
						}while(NOTPRESSED == selection);
     de0:	8f 3f       	cpi	r24, 0xFF	; 255
     de2:	89 f3       	breq	.-30     	; 0xdc6 <main+0x494>
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	95 ed       	ldi	r25, 0xD5	; 213
     de8:	a6 e0       	ldi	r26, 0x06	; 6
     dea:	81 50       	subi	r24, 0x01	; 1
     dec:	90 40       	sbci	r25, 0x00	; 0
     dee:	a0 40       	sbci	r26, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <main+0x4b8>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <main+0x4c2>
     df4:	00 00       	nop
						_delay_ms(280);
						LCD_clearscreen();
     df6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						switch(selection)
     dfa:	80 91 6e 02 	lds	r24, 0x026E
     dfe:	82 33       	cpi	r24, 0x32	; 50
     e00:	09 f4       	brne	.+2      	; 0xe04 <main+0x4d2>
     e02:	5b c0       	rjmp	.+182    	; 0xeba <main+0x588>
     e04:	83 33       	cpi	r24, 0x33	; 51
     e06:	20 f4       	brcc	.+8      	; 0xe10 <main+0x4de>
     e08:	81 33       	cpi	r24, 0x31	; 49
     e0a:	09 f0       	breq	.+2      	; 0xe0e <main+0x4dc>
     e0c:	f1 c2       	rjmp	.+1506   	; 0x13f0 <main+0xabe>
     e0e:	07 c0       	rjmp	.+14     	; 0xe1e <main+0x4ec>
     e10:	83 33       	cpi	r24, 0x33	; 51
     e12:	09 f4       	brne	.+2      	; 0xe16 <main+0x4e4>
     e14:	a0 c0       	rjmp	.+320    	; 0xf56 <main+0x624>
     e16:	84 33       	cpi	r24, 0x34	; 52
     e18:	09 f0       	breq	.+2      	; 0xe1c <main+0x4ea>
     e1a:	ea c2       	rjmp	.+1492   	; 0x13f0 <main+0xabe>
     e1c:	ea c0       	rjmp	.+468    	; 0xff2 <main+0x6c0>
						{
							case '1':
							SPI_MasterTransmitchar(R1S);
     e1e:	80 e3       	ldi	r24, 0x30	; 48
     e20:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
     e24:	af ec       	ldi	r26, 0xCF	; 207
     e26:	b7 e0       	ldi	r27, 0x07	; 7
     e28:	11 97       	sbiw	r26, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <main+0x4f6>
     e2c:	00 c0       	rjmp	.+0      	; 0xe2e <main+0x4fc>
     e2e:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
     e36:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room1 S:");
     e38:	80 e6       	ldi	r24, 0x60	; 96
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							
							if(R1ON == status)
     e40:	c4 33       	cpi	r28, 0x34	; 52
     e42:	29 f4       	brne	.+10     	; 0xe4e <main+0x51c>
							{
								LCD_vSend_string("ON");
     e44:	89 e6       	ldi	r24, 0x69	; 105
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <main+0x528>
							}
							else if(R1OFF == status)
     e4e:	c5 33       	cpi	r28, 0x35	; 53
     e50:	21 f4       	brne	.+8      	; 0xe5a <main+0x528>
							{
								LCD_vSend_string("OFF");
     e52:	8c e6       	ldi	r24, 0x6C	; 108
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
     e62:	80 e7       	ldi	r24, 0x70	; 112
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
     e6a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     e6e:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
     e72:	20 91 72 02 	lds	r18, 0x0272
     e76:	30 91 73 02 	lds	r19, 0x0273
     e7a:	b7 e1       	ldi	r27, 0x17	; 23
     e7c:	20 37       	cpi	r18, 0x70	; 112
     e7e:	3b 07       	cpc	r19, r27
     e80:	08 f0       	brcs	.+2      	; 0xe84 <main+0x552>
     e82:	b7 cd       	rjmp	.-1170   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	89 f3       	breq	.-30     	; 0xe6a <main+0x538>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	95 ed       	ldi	r25, 0xD5	; 213
     e8c:	a6 e0       	ldi	r26, 0x06	; 6
     e8e:	81 50       	subi	r24, 0x01	; 1
     e90:	90 40       	sbci	r25, 0x00	; 0
     e92:	a0 40       	sbci	r26, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <main+0x55c>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <main+0x566>
     e98:	00 00       	nop
							_delay_ms(280);
							switch(selection)
     e9a:	80 91 6e 02 	lds	r24, 0x026E
     e9e:	81 33       	cpi	r24, 0x31	; 49
     ea0:	21 f0       	breq	.+8      	; 0xeaa <main+0x578>
     ea2:	82 33       	cpi	r24, 0x32	; 50
     ea4:	09 f0       	breq	.+2      	; 0xea8 <main+0x576>
     ea6:	b3 c2       	rjmp	.+1382   	; 0x140e <main+0xadc>
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <main+0x580>
							{
								case '1':
								SPI_MasterTransmitchar(R1ON);
     eaa:	84 e3       	ldi	r24, 0x34	; 52
     eac:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
     eb0:	ae c2       	rjmp	.+1372   	; 0x140e <main+0xadc>
								case '2':
								SPI_MasterTransmitchar(R1OFF);
     eb2:	85 e3       	ldi	r24, 0x35	; 53
     eb4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
     eb8:	aa c2       	rjmp	.+1364   	; 0x140e <main+0xadc>
								default:
								break;
							}
							break;
							case '2':
							SPI_MasterTransmitchar(R2S);
     eba:	81 e3       	ldi	r24, 0x31	; 49
     ebc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
     ec0:	af ec       	ldi	r26, 0xCF	; 207
     ec2:	b7 e0       	ldi	r27, 0x07	; 7
     ec4:	11 97       	sbiw	r26, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <main+0x592>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <main+0x598>
     eca:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
     ed2:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room2 S:");
     ed4:	81 e8       	ldi	r24, 0x81	; 129
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							if(R2ON == status)
     edc:	c6 33       	cpi	r28, 0x36	; 54
     ede:	29 f4       	brne	.+10     	; 0xeea <main+0x5b8>
							{
								LCD_vSend_string("ON");
     ee0:	89 e6       	ldi	r24, 0x69	; 105
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <main+0x5c4>
							}
							else if(R2OFF == status)
     eea:	c7 33       	cpi	r28, 0x37	; 55
     eec:	21 f4       	brne	.+8      	; 0xef6 <main+0x5c4>
							{
								LCD_vSend_string("OFF");
     eee:	8c e6       	ldi	r24, 0x6C	; 108
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
     efe:	80 e7       	ldi	r24, 0x70	; 112
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
     f06:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     f0a:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
     f0e:	20 91 72 02 	lds	r18, 0x0272
     f12:	30 91 73 02 	lds	r19, 0x0273
     f16:	b7 e1       	ldi	r27, 0x17	; 23
     f18:	20 37       	cpi	r18, 0x70	; 112
     f1a:	3b 07       	cpc	r19, r27
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <main+0x5ee>
     f1e:	69 cd       	rjmp	.-1326   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
     f20:	8f 3f       	cpi	r24, 0xFF	; 255
     f22:	89 f3       	breq	.-30     	; 0xf06 <main+0x5d4>
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	95 ed       	ldi	r25, 0xD5	; 213
     f28:	a6 e0       	ldi	r26, 0x06	; 6
     f2a:	81 50       	subi	r24, 0x01	; 1
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	a0 40       	sbci	r26, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <main+0x5f8>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <main+0x602>
     f34:	00 00       	nop
							_delay_ms(280);
							switch(selection)
     f36:	80 91 6e 02 	lds	r24, 0x026E
     f3a:	81 33       	cpi	r24, 0x31	; 49
     f3c:	21 f0       	breq	.+8      	; 0xf46 <main+0x614>
     f3e:	82 33       	cpi	r24, 0x32	; 50
     f40:	09 f0       	breq	.+2      	; 0xf44 <main+0x612>
     f42:	65 c2       	rjmp	.+1226   	; 0x140e <main+0xadc>
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <main+0x61c>
							{
								case '1':
								SPI_MasterTransmitchar(R2ON);
     f46:	86 e3       	ldi	r24, 0x36	; 54
     f48:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
     f4c:	60 c2       	rjmp	.+1216   	; 0x140e <main+0xadc>
								case '2':
								SPI_MasterTransmitchar(R2OFF);
     f4e:	87 e3       	ldi	r24, 0x37	; 55
     f50:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
     f54:	5c c2       	rjmp	.+1208   	; 0x140e <main+0xadc>
								default:
								break;
							}
							break;
							case '3':
							SPI_MasterTransmitchar(R3S);
     f56:	82 e3       	ldi	r24, 0x32	; 50
     f58:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
     f5c:	af ec       	ldi	r26, 0xCF	; 207
     f5e:	b7 e0       	ldi	r27, 0x07	; 7
     f60:	11 97       	sbiw	r26, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x62e>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <main+0x634>
     f66:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
     f6e:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room3 S:");
     f70:	8a e8       	ldi	r24, 0x8A	; 138
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							if(R3ON == status)
     f78:	c8 33       	cpi	r28, 0x38	; 56
     f7a:	29 f4       	brne	.+10     	; 0xf86 <main+0x654>
							{
								LCD_vSend_string("ON");
     f7c:	89 e6       	ldi	r24, 0x69	; 105
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <main+0x660>
							}
							else if(R3OFF == status)
     f86:	c9 33       	cpi	r28, 0x39	; 57
     f88:	21 f4       	brne	.+8      	; 0xf92 <main+0x660>
							{
								LCD_vSend_string("OFF");
     f8a:	8c e6       	ldi	r24, 0x6C	; 108
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
     f9a:	80 e7       	ldi	r24, 0x70	; 112
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
     fa2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
     fa6:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
     faa:	20 91 72 02 	lds	r18, 0x0272
     fae:	30 91 73 02 	lds	r19, 0x0273
     fb2:	b7 e1       	ldi	r27, 0x17	; 23
     fb4:	20 37       	cpi	r18, 0x70	; 112
     fb6:	3b 07       	cpc	r19, r27
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <main+0x68a>
     fba:	1b cd       	rjmp	.-1482   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	89 f3       	breq	.-30     	; 0xfa2 <main+0x670>
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	95 ed       	ldi	r25, 0xD5	; 213
     fc4:	a6 e0       	ldi	r26, 0x06	; 6
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	a0 40       	sbci	r26, 0x00	; 0
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <main+0x694>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <main+0x69e>
     fd0:	00 00       	nop
							_delay_ms(280);
							switch(selection)
     fd2:	80 91 6e 02 	lds	r24, 0x026E
     fd6:	81 33       	cpi	r24, 0x31	; 49
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <main+0x6b0>
     fda:	82 33       	cpi	r24, 0x32	; 50
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <main+0x6ae>
     fde:	17 c2       	rjmp	.+1070   	; 0x140e <main+0xadc>
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <main+0x6b8>
							{
								case '1':
								SPI_MasterTransmitchar(R3ON);
     fe2:	88 e3       	ldi	r24, 0x38	; 56
     fe4:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
     fe8:	12 c2       	rjmp	.+1060   	; 0x140e <main+0xadc>
								case '2':
								SPI_MasterTransmitchar(R3OFF);
     fea:	89 e3       	ldi	r24, 0x39	; 57
     fec:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
     ff0:	0e c2       	rjmp	.+1052   	; 0x140e <main+0xadc>
							}
							break;
							case '4':
							RETMENU:
							LCD_clearscreen();
							LCD_vSend_string("1:Room4");
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f3 e9       	ldi	r31, 0x93	; 147
     ff6:	af 2e       	mov	r10, r31
     ff8:	f1 e0       	ldi	r31, 0x01	; 1
     ffa:	bf 2e       	mov	r11, r31
     ffc:	f0 2d       	mov	r31, r0
									SPI_MasterTransmitchar(AIRCONDTSET2);
									_delay_ms(1);
									SPI_MasterTransmitchar(seconddigit);
									LCD_clearscreen();
									_delay_ms(700);
									LCD_vSend_string("Temperature Sent");
     ffe:	0f 2e       	mov	r0, r31
    1000:	f8 ee       	ldi	r31, 0xE8	; 232
    1002:	8f 2e       	mov	r8, r31
    1004:	f1 e0       	ldi	r31, 0x01	; 1
    1006:	9f 2e       	mov	r9, r31
    1008:	f0 2d       	mov	r31, r0
									break;
									case '2' :
									SPI_MasterTransmitchar(AIRCONDS);
									_delay_ms(1);
									status = SPI_MasterTransmitchar(0xff);
									LCD_vSend_string("Air Cond. S:");
    100a:	0f 2e       	mov	r0, r31
    100c:	f9 ef       	ldi	r31, 0xF9	; 249
    100e:	6f 2e       	mov	r6, r31
    1010:	f1 e0       	ldi	r31, 0x01	; 1
    1012:	7f 2e       	mov	r7, r31
    1014:	f0 2d       	mov	r31, r0
								break;
							}
							break;
							case '4':
							RETMENU:
							LCD_clearscreen();
    1016:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
							LCD_vSend_string("1:Room4");
    101a:	c5 01       	movw	r24, r10
    101c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							LCD_movecursor(1,12);
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	6c e0       	ldi	r22, 0x0C	; 12
    1024:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("2:TV");
    1028:	8b e9       	ldi	r24, 0x9B	; 155
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							LCD_movecursor(2,1);
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("3:Air Cond.4:RET");
    1038:	80 ea       	ldi	r24, 0xA0	; 160
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
    1040:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    1044:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
    1048:	20 91 72 02 	lds	r18, 0x0272
    104c:	30 91 73 02 	lds	r19, 0x0273
    1050:	97 e1       	ldi	r25, 0x17	; 23
    1052:	20 37       	cpi	r18, 0x70	; 112
    1054:	39 07       	cpc	r19, r25
    1056:	08 f0       	brcs	.+2      	; 0x105a <main+0x728>
    1058:	cc cc       	rjmp	.-1640   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
    105a:	8f 3f       	cpi	r24, 0xFF	; 255
    105c:	89 f3       	breq	.-30     	; 0x1040 <main+0x70e>
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	95 ed       	ldi	r25, 0xD5	; 213
    1062:	a6 e0       	ldi	r26, 0x06	; 6
    1064:	81 50       	subi	r24, 0x01	; 1
    1066:	90 40       	sbci	r25, 0x00	; 0
    1068:	a0 40       	sbci	r26, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <main+0x732>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <main+0x73c>
    106e:	00 00       	nop
							_delay_ms(280);
							switch(selection)
    1070:	80 91 6e 02 	lds	r24, 0x026E
    1074:	82 33       	cpi	r24, 0x32	; 50
    1076:	09 f4       	brne	.+2      	; 0x107a <main+0x748>
    1078:	58 c0       	rjmp	.+176    	; 0x112a <main+0x7f8>
    107a:	83 33       	cpi	r24, 0x33	; 51
    107c:	09 f4       	brne	.+2      	; 0x1080 <main+0x74e>
    107e:	a7 c0       	rjmp	.+334    	; 0x11ce <main+0x89c>
    1080:	81 33       	cpi	r24, 0x31	; 49
    1082:	09 f0       	breq	.+2      	; 0x1086 <main+0x754>
    1084:	c4 c1       	rjmp	.+904    	; 0x140e <main+0xadc>
							{
								case '1':
								LCD_clearscreen();
    1086:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
								SPI_MasterTransmitchar(R4S);
    108a:	83 e3       	ldi	r24, 0x33	; 51
    108c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1090:	af ec       	ldi	r26, 0xCF	; 207
    1092:	b7 e0       	ldi	r27, 0x07	; 7
    1094:	11 97       	sbiw	r26, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <main+0x762>
    1098:	00 c0       	rjmp	.+0      	; 0x109a <main+0x768>
    109a:	00 00       	nop
								_delay_ms(1);
								status = SPI_MasterTransmitchar(0xff);
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    10a2:	c8 2f       	mov	r28, r24
								LCD_vSend_string("Room4 S:");
    10a4:	81 eb       	ldi	r24, 0xB1	; 177
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								if(R4ON == status)
    10ac:	c1 34       	cpi	r28, 0x41	; 65
    10ae:	29 f4       	brne	.+10     	; 0x10ba <main+0x788>
								{
									LCD_vSend_string("ON");
    10b0:	89 e6       	ldi	r24, 0x69	; 105
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <main+0x794>
								}
								else if(R4OFF == status)
    10ba:	c2 34       	cpi	r28, 0x42	; 66
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <main+0x794>
								{
									LCD_vSend_string("OFF");
    10be:	8c e6       	ldi	r24, 0x6C	; 108
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								}
								LCD_movecursor(2,1);
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
								LCD_vSend_string("1-on 2-off 0-RET");
    10ce:	80 e7       	ldi	r24, 0x70	; 112
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								do{
									selection = keypad_u8check_press();
    10d6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    10da:	80 93 6e 02 	sts	0x026E, r24
									if(counter >= SESSION_TIME_OUTX100)
    10de:	20 91 72 02 	lds	r18, 0x0272
    10e2:	30 91 73 02 	lds	r19, 0x0273
    10e6:	b7 e1       	ldi	r27, 0x17	; 23
    10e8:	20 37       	cpi	r18, 0x70	; 112
    10ea:	3b 07       	cpc	r19, r27
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <main+0x7be>
    10ee:	81 cc       	rjmp	.-1790   	; 0x9f2 <main+0xc0>
									{
										goto start;
									}
								}while(NOTPRESSED == selection);
    10f0:	8f 3f       	cpi	r24, 0xFF	; 255
    10f2:	89 f3       	breq	.-30     	; 0x10d6 <main+0x7a4>
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	95 ed       	ldi	r25, 0xD5	; 213
    10f8:	a6 e0       	ldi	r26, 0x06	; 6
    10fa:	81 50       	subi	r24, 0x01	; 1
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	a0 40       	sbci	r26, 0x00	; 0
    1100:	e1 f7       	brne	.-8      	; 0x10fa <main+0x7c8>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <main+0x7d2>
    1104:	00 00       	nop
								_delay_ms(280);
								switch(selection)
    1106:	80 91 6e 02 	lds	r24, 0x026E
    110a:	81 33       	cpi	r24, 0x31	; 49
    110c:	31 f0       	breq	.+12     	; 0x111a <main+0x7e8>
    110e:	82 33       	cpi	r24, 0x32	; 50
    1110:	41 f0       	breq	.+16     	; 0x1122 <main+0x7f0>
    1112:	80 33       	cpi	r24, 0x30	; 48
    1114:	09 f0       	breq	.+2      	; 0x1118 <main+0x7e6>
    1116:	7b c1       	rjmp	.+758    	; 0x140e <main+0xadc>
    1118:	7e cf       	rjmp	.-260    	; 0x1016 <main+0x6e4>
								{
									case '1':
									SPI_MasterTransmitchar(R4ON);
    111a:	81 e4       	ldi	r24, 0x41	; 65
    111c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
									break;
    1120:	76 c1       	rjmp	.+748    	; 0x140e <main+0xadc>
									case '2':
									SPI_MasterTransmitchar(R4OFF);
    1122:	82 e4       	ldi	r24, 0x42	; 66
    1124:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
									break;
    1128:	72 c1       	rjmp	.+740    	; 0x140e <main+0xadc>
									default:
									break;
								}
								break;
								case '2':
								LCD_clearscreen();
    112a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
								SPI_MasterTransmitchar(TVS);
    112e:	83 e4       	ldi	r24, 0x43	; 67
    1130:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1134:	af ec       	ldi	r26, 0xCF	; 207
    1136:	b7 e0       	ldi	r27, 0x07	; 7
    1138:	11 97       	sbiw	r26, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <main+0x806>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <main+0x80c>
    113e:	00 00       	nop
								_delay_ms(1);
								status = SPI_MasterTransmitchar(0xff);
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1146:	c8 2f       	mov	r28, r24
								LCD_vSend_string("TV S:");
    1148:	8a eb       	ldi	r24, 0xBA	; 186
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								if(TVON == status)
    1150:	c4 34       	cpi	r28, 0x44	; 68
    1152:	29 f4       	brne	.+10     	; 0x115e <main+0x82c>
								{
									LCD_vSend_string("ON");
    1154:	89 e6       	ldi	r24, 0x69	; 105
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    115c:	06 c0       	rjmp	.+12     	; 0x116a <main+0x838>
								}
								else if(TVOFF == status)
    115e:	c5 34       	cpi	r28, 0x45	; 69
    1160:	21 f4       	brne	.+8      	; 0x116a <main+0x838>
								{
									LCD_vSend_string("OFF");
    1162:	8c e6       	ldi	r24, 0x6C	; 108
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								}
								LCD_movecursor(2,1);
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	61 e0       	ldi	r22, 0x01	; 1
    116e:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
								LCD_vSend_string("1-on 2-off 0-RET");
    1172:	80 e7       	ldi	r24, 0x70	; 112
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								do{
									selection = keypad_u8check_press();
    117a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    117e:	80 93 6e 02 	sts	0x026E, r24
									if(counter >= SESSION_TIME_OUTX100)
    1182:	20 91 72 02 	lds	r18, 0x0272
    1186:	30 91 73 02 	lds	r19, 0x0273
    118a:	b7 e1       	ldi	r27, 0x17	; 23
    118c:	20 37       	cpi	r18, 0x70	; 112
    118e:	3b 07       	cpc	r19, r27
    1190:	08 f0       	brcs	.+2      	; 0x1194 <main+0x862>
    1192:	2f cc       	rjmp	.-1954   	; 0x9f2 <main+0xc0>
									{
										goto start;
									}
								}while(NOTPRESSED == selection);
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	89 f3       	breq	.-30     	; 0x117a <main+0x848>
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	95 ed       	ldi	r25, 0xD5	; 213
    119c:	a6 e0       	ldi	r26, 0x06	; 6
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	90 40       	sbci	r25, 0x00	; 0
    11a2:	a0 40       	sbci	r26, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <main+0x86c>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <main+0x876>
    11a8:	00 00       	nop
								_delay_ms(280);
								switch(selection)
    11aa:	80 91 6e 02 	lds	r24, 0x026E
    11ae:	81 33       	cpi	r24, 0x31	; 49
    11b0:	31 f0       	breq	.+12     	; 0x11be <main+0x88c>
    11b2:	82 33       	cpi	r24, 0x32	; 50
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <main+0x894>
    11b6:	80 33       	cpi	r24, 0x30	; 48
    11b8:	09 f0       	breq	.+2      	; 0x11bc <main+0x88a>
    11ba:	29 c1       	rjmp	.+594    	; 0x140e <main+0xadc>
    11bc:	2c cf       	rjmp	.-424    	; 0x1016 <main+0x6e4>
								{
									case '1':
									SPI_MasterTransmitchar(TVON);
    11be:	84 e4       	ldi	r24, 0x44	; 68
    11c0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
									break;
    11c4:	24 c1       	rjmp	.+584    	; 0x140e <main+0xadc>
									case '2':
									SPI_MasterTransmitchar(TVOFF);
    11c6:	85 e4       	ldi	r24, 0x45	; 69
    11c8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
									break;
    11cc:	20 c1       	rjmp	.+576    	; 0x140e <main+0xadc>
									else if(AIRCONDOFF == status)
									{
										LCD_vSend_string("OFF");
									}
									LCD_movecursor(2,1);
									LCD_vSend_string("1-On 2-Off 0-RET");
    11ce:	06 e0       	ldi	r16, 0x06	; 6
    11d0:	12 e0       	ldi	r17, 0x02	; 2
									{
										LCD_vSend_string("ON");
									}
									else if(AIRCONDOFF == status)
									{
										LCD_vSend_string("OFF");
    11d2:	0f 2e       	mov	r0, r31
    11d4:	fc e6       	ldi	r31, 0x6C	; 108
    11d6:	ef 2e       	mov	r14, r31
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	ff 2e       	mov	r15, r31
    11dc:	f0 2d       	mov	r31, r0
									_delay_ms(1);
									status = SPI_MasterTransmitchar(0xff);
									LCD_vSend_string("Air Cond. S:");
									if(AIRCONDON == status)
									{
										LCD_vSend_string("ON");
    11de:	0f 2e       	mov	r0, r31
    11e0:	f9 e6       	ldi	r31, 0x69	; 105
    11e2:	cf 2e       	mov	r12, r31
    11e4:	f1 e0       	ldi	r31, 0x01	; 1
    11e6:	df 2e       	mov	r13, r31
    11e8:	f0 2d       	mov	r31, r0
									break;
								}
								break;
								case '3':
								RETAIRCond:
								LCD_clearscreen();
    11ea:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
								LCD_vSend_string("1:Set Temp");
    11ee:	80 ec       	ldi	r24, 0xC0	; 192
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								LCD_movecursor(2,1);
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
								LCD_vSend_string("2:Control");
    11fe:	8b ec       	ldi	r24, 0xCB	; 203
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								LCD_movecursor(2,12);
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	6c e0       	ldi	r22, 0x0C	; 12
    120a:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
								LCD_vSend_string("0:RET");
    120e:	85 ed       	ldi	r24, 0xD5	; 213
    1210:	91 e0       	ldi	r25, 0x01	; 1
    1212:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
								do{
									selection = keypad_u8check_press();
    1216:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    121a:	80 93 6e 02 	sts	0x026E, r24
									if(counter >= SESSION_TIME_OUTX100)
    121e:	20 91 72 02 	lds	r18, 0x0272
    1222:	30 91 73 02 	lds	r19, 0x0273
    1226:	97 e1       	ldi	r25, 0x17	; 23
    1228:	20 37       	cpi	r18, 0x70	; 112
    122a:	39 07       	cpc	r19, r25
    122c:	08 f0       	brcs	.+2      	; 0x1230 <main+0x8fe>
    122e:	e1 cb       	rjmp	.-2110   	; 0x9f2 <main+0xc0>
									{
										goto start;
									}
								}while(NOTPRESSED == selection);
    1230:	8f 3f       	cpi	r24, 0xFF	; 255
    1232:	89 f3       	breq	.-30     	; 0x1216 <main+0x8e4>
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	95 ed       	ldi	r25, 0xD5	; 213
    1238:	a6 e0       	ldi	r26, 0x06	; 6
    123a:	81 50       	subi	r24, 0x01	; 1
    123c:	90 40       	sbci	r25, 0x00	; 0
    123e:	a0 40       	sbci	r26, 0x00	; 0
    1240:	e1 f7       	brne	.-8      	; 0x123a <main+0x908>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <main+0x912>
    1244:	00 00       	nop
								_delay_ms(280);
								LCD_clearscreen();
    1246:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
								switch (selection)
    124a:	80 91 6e 02 	lds	r24, 0x026E
    124e:	81 33       	cpi	r24, 0x31	; 49
    1250:	39 f0       	breq	.+14     	; 0x1260 <main+0x92e>
    1252:	82 33       	cpi	r24, 0x32	; 50
    1254:	09 f4       	brne	.+2      	; 0x1258 <main+0x926>
    1256:	81 c0       	rjmp	.+258    	; 0x135a <main+0xa28>
    1258:	80 33       	cpi	r24, 0x30	; 48
    125a:	09 f0       	breq	.+2      	; 0x125e <main+0x92c>
    125c:	d8 c0       	rjmp	.+432    	; 0x140e <main+0xadc>
    125e:	db ce       	rjmp	.-586    	; 0x1016 <main+0x6e4>
								{
									case '1' :  
									LCD_vSend_string("Set temp.:--");
    1260:	c1 01       	movw	r24, r2
    1262:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
									LCD_vSend_char(' ');
    1266:	80 e2       	ldi	r24, 0x20	; 32
    1268:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
									//LCD Send Degree character
									LCD_vSend_char(0xdf);
    126c:	8f ed       	ldi	r24, 0xDF	; 223
    126e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
									LCD_vSend_char('C');
    1272:	83 e4       	ldi	r24, 0x43	; 67
    1274:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
									LCD_movecursor(1,11);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	6b e0       	ldi	r22, 0x0B	; 11
    127c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
    1280:	af ec       	ldi	r26, 0xCF	; 207
    1282:	b7 e0       	ldi	r27, 0x07	; 7
    1284:	11 97       	sbiw	r26, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <main+0x952>
    1288:	00 c0       	rjmp	.+0      	; 0x128a <main+0x958>
    128a:	00 00       	nop
									_delay_ms(1);
									do{
										firstdigit = keypad_u8check_press();
    128c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    1290:	80 93 6d 02 	sts	0x026D, r24
										if(counter >= SESSION_TIME_OUTX100)
    1294:	20 91 72 02 	lds	r18, 0x0272
    1298:	30 91 73 02 	lds	r19, 0x0273
    129c:	b7 e1       	ldi	r27, 0x17	; 23
    129e:	20 37       	cpi	r18, 0x70	; 112
    12a0:	3b 07       	cpc	r19, r27
    12a2:	08 f0       	brcs	.+2      	; 0x12a6 <main+0x974>
    12a4:	a6 cb       	rjmp	.-2228   	; 0x9f2 <main+0xc0>
										{
											goto start;
										}
									}while(NOTPRESSED == firstdigit);
    12a6:	8f 3f       	cpi	r24, 0xFF	; 255
    12a8:	89 f3       	breq	.-30     	; 0x128c <main+0x95a>
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	95 ed       	ldi	r25, 0xD5	; 213
    12ae:	a6 e0       	ldi	r26, 0x06	; 6
    12b0:	81 50       	subi	r24, 0x01	; 1
    12b2:	90 40       	sbci	r25, 0x00	; 0
    12b4:	a0 40       	sbci	r26, 0x00	; 0
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <main+0x97e>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <main+0x988>
    12ba:	00 00       	nop
									_delay_ms(280);
									LCD_vSend_char(firstdigit);
    12bc:	80 91 6d 02 	lds	r24, 0x026D
    12c0:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
									SPI_MasterTransmitchar(AIRCONDTSET1);
    12c4:	88 e4       	ldi	r24, 0x48	; 72
    12c6:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    12ca:	af ec       	ldi	r26, 0xCF	; 207
    12cc:	b7 e0       	ldi	r27, 0x07	; 7
    12ce:	11 97       	sbiw	r26, 0x01	; 1
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <main+0x99c>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <main+0x9a2>
    12d4:	00 00       	nop
									_delay_ms(1);
									SPI_MasterTransmitchar(firstdigit);
    12d6:	80 91 6d 02 	lds	r24, 0x026D
    12da:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    12de:	ef ec       	ldi	r30, 0xCF	; 207
    12e0:	f7 e0       	ldi	r31, 0x07	; 7
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <main+0x9b0>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <main+0x9b6>
    12e8:	00 00       	nop
									_delay_ms(1);
									
									do{
										seconddigit = keypad_u8check_press();
    12ea:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    12ee:	80 93 6c 02 	sts	0x026C, r24
										if(counter >= SESSION_TIME_OUTX100)
    12f2:	20 91 72 02 	lds	r18, 0x0272
    12f6:	30 91 73 02 	lds	r19, 0x0273
    12fa:	f7 e1       	ldi	r31, 0x17	; 23
    12fc:	20 37       	cpi	r18, 0x70	; 112
    12fe:	3f 07       	cpc	r19, r31
    1300:	08 f0       	brcs	.+2      	; 0x1304 <main+0x9d2>
    1302:	77 cb       	rjmp	.-2322   	; 0x9f2 <main+0xc0>
										{
											goto start;
										}
									}while(NOTPRESSED == seconddigit);
    1304:	8f 3f       	cpi	r24, 0xFF	; 255
    1306:	89 f3       	breq	.-30     	; 0x12ea <main+0x9b8>
    1308:	8f e3       	ldi	r24, 0x3F	; 63
    130a:	9c ed       	ldi	r25, 0xDC	; 220
    130c:	a6 e0       	ldi	r26, 0x06	; 6
    130e:	81 50       	subi	r24, 0x01	; 1
    1310:	90 40       	sbci	r25, 0x00	; 0
    1312:	a0 40       	sbci	r26, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <main+0x9dc>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <main+0x9e6>
    1318:	00 00       	nop
									_delay_ms(281);
									LCD_vSend_char(seconddigit);
    131a:	80 91 6c 02 	lds	r24, 0x026C
    131e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
									SPI_MasterTransmitchar(AIRCONDTSET2);
    1322:	8b e4       	ldi	r24, 0x4B	; 75
    1324:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1328:	af ec       	ldi	r26, 0xCF	; 207
    132a:	b7 e0       	ldi	r27, 0x07	; 7
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <main+0x9fa>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <main+0xa00>
    1332:	00 00       	nop
									_delay_ms(1);
									SPI_MasterTransmitchar(seconddigit);
    1334:	80 91 6c 02 	lds	r24, 0x026C
    1338:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
									LCD_clearscreen();
    133c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	96 e1       	ldi	r25, 0x16	; 22
    1344:	a1 e1       	ldi	r26, 0x11	; 17
    1346:	81 50       	subi	r24, 0x01	; 1
    1348:	90 40       	sbci	r25, 0x00	; 0
    134a:	a0 40       	sbci	r26, 0x00	; 0
    134c:	e1 f7       	brne	.-8      	; 0x1346 <main+0xa14>
    134e:	00 c0       	rjmp	.+0      	; 0x1350 <main+0xa1e>
    1350:	00 00       	nop
									_delay_ms(700);
									LCD_vSend_string("Temperature Sent");
    1352:	c4 01       	movw	r24, r8
    1354:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
									goto RETAIRCond;
    1358:	48 cf       	rjmp	.-368    	; 0x11ea <main+0x8b8>
									break;
									case '2' :
									SPI_MasterTransmitchar(AIRCONDS);
    135a:	86 e4       	ldi	r24, 0x46	; 70
    135c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1360:	af ec       	ldi	r26, 0xCF	; 207
    1362:	b7 e0       	ldi	r27, 0x07	; 7
    1364:	11 97       	sbiw	r26, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <main+0xa32>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <main+0xa38>
    136a:	00 00       	nop
									_delay_ms(1);
									status = SPI_MasterTransmitchar(0xff);
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1372:	c8 2f       	mov	r28, r24
									LCD_vSend_string("Air Cond. S:");
    1374:	c3 01       	movw	r24, r6
    1376:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
									if(AIRCONDON == status)
    137a:	c7 34       	cpi	r28, 0x47	; 71
    137c:	21 f4       	brne	.+8      	; 0x1386 <main+0xa54>
									{
										LCD_vSend_string("ON");
    137e:	c6 01       	movw	r24, r12
    1380:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <main+0xa5e>
									}
									else if(AIRCONDOFF == status)
    1386:	ca 34       	cpi	r28, 0x4A	; 74
    1388:	19 f4       	brne	.+6      	; 0x1390 <main+0xa5e>
									{
										LCD_vSend_string("OFF");
    138a:	c7 01       	movw	r24, r14
    138c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
									}
									LCD_movecursor(2,1);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
									LCD_vSend_string("1-On 2-Off 0-RET");
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
									do{
										selection = keypad_u8check_press();
    139e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    13a2:	80 93 6e 02 	sts	0x026E, r24
										if(counter >= SESSION_TIME_OUTX100)
    13a6:	20 91 72 02 	lds	r18, 0x0272
    13aa:	30 91 73 02 	lds	r19, 0x0273
    13ae:	b7 e1       	ldi	r27, 0x17	; 23
    13b0:	20 37       	cpi	r18, 0x70	; 112
    13b2:	3b 07       	cpc	r19, r27
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <main+0xa86>
    13b6:	1d cb       	rjmp	.-2502   	; 0x9f2 <main+0xc0>
										{
											goto start;
										}
									}while(NOTPRESSED == selection);
    13b8:	8f 3f       	cpi	r24, 0xFF	; 255
    13ba:	89 f3       	breq	.-30     	; 0x139e <main+0xa6c>
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	95 ed       	ldi	r25, 0xD5	; 213
    13c0:	a6 e0       	ldi	r26, 0x06	; 6
    13c2:	81 50       	subi	r24, 0x01	; 1
    13c4:	90 40       	sbci	r25, 0x00	; 0
    13c6:	a0 40       	sbci	r26, 0x00	; 0
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <main+0xa90>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <main+0xa9a>
    13cc:	00 00       	nop
									_delay_ms(280);
									switch(selection)
    13ce:	80 91 6e 02 	lds	r24, 0x026E
    13d2:	81 33       	cpi	r24, 0x31	; 49
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <main+0xaae>
    13d6:	82 33       	cpi	r24, 0x32	; 50
    13d8:	39 f0       	breq	.+14     	; 0x13e8 <main+0xab6>
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	c1 f4       	brne	.+48     	; 0x140e <main+0xadc>
    13de:	05 cf       	rjmp	.-502    	; 0x11ea <main+0x8b8>
									{
										case '1':
										SPI_MasterTransmitchar(AIRCONDON);
    13e0:	87 e4       	ldi	r24, 0x47	; 71
    13e2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
										break;
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <main+0xadc>
										case '2':
										SPI_MasterTransmitchar(AIRCONDOFF);
    13e8:	8a e4       	ldi	r24, 0x4A	; 74
    13ea:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
										break;
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <main+0xadc>
								default:
								break;
							}								
							break;
							default:
							LCD_vSend_string("wrong input");
    13f0:	87 e1       	ldi	r24, 0x17	; 23
    13f2:	92 e0       	ldi	r25, 0x02	; 2
    13f4:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	99 e6       	ldi	r25, 0x69	; 105
    13fc:	a8 e1       	ldi	r26, 0x18	; 24
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	90 40       	sbci	r25, 0x00	; 0
    1402:	a0 40       	sbci	r26, 0x00	; 0
    1404:	e1 f7       	brne	.-8      	; 0x13fe <main+0xacc>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <main+0xad6>
    1408:	00 00       	nop
							_delay_ms(1000);
							LCD_clearscreen();
    140a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						}
						LCD_clearscreen();
    140e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						LCD_vSend_string("1:Room1 2:Room2");
    1412:	c2 01       	movw	r24, r4
    1414:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
						LCD_movecursor(2,1);
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
						LCD_vSend_string("3:Room3 4:More");
    1420:	81 e5       	ldi	r24, 0x51	; 81
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
						
					}
    1428:	ce cc       	rjmp	.-1636   	; 0xdc6 <main+0x494>
					
				}
			}
			else if('1' == selection)
    142a:	81 33       	cpi	r24, 0x31	; 49
    142c:	09 f0       	breq	.+2      	; 0x1430 <main+0xafe>
    142e:	2c c2       	rjmp	.+1112   	; 0x1888 <main+0xf56>
			{
				LCD_vSend_string("Guest mode");
    1430:	83 e2       	ldi	r24, 0x23	; 35
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
				LCD_movecursor(2,1);
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	61 e0       	ldi	r22, 0x01	; 1
    143c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
				LCD_vSend_string("Enter pass:");
    1440:	8a e2       	ldi	r24, 0x2A	; 42
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
				for(passwordindex = 0;passwordindex<4;passwordindex++)
    1448:	10 92 71 02 	sts	0x0271, r1
				{
					do{
						password[passwordindex] = keypad_u8check_press();
    144c:	c0 91 71 02 	lds	r28, 0x0271
    1450:	d0 e0       	ldi	r29, 0x00	; 0
    1452:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    1456:	fe 01       	movw	r30, r28
    1458:	eb 59       	subi	r30, 0x9B	; 155
    145a:	fd 4f       	sbci	r31, 0xFD	; 253
    145c:	80 83       	st	Z, r24
					}while(NOTPRESSED == password[passwordindex]);
    145e:	80 91 71 02 	lds	r24, 0x0271
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	8b 59       	subi	r24, 0x9B	; 155
    1466:	9d 4f       	sbci	r25, 0xFD	; 253
    1468:	dc 01       	movw	r26, r24
    146a:	8c 91       	ld	r24, X
    146c:	8f 3f       	cpi	r24, 0xFF	; 255
    146e:	71 f3       	breq	.-36     	; 0x144c <main+0xb1a>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	95 ed       	ldi	r25, 0xD5	; 213
    1474:	a6 e0       	ldi	r26, 0x06	; 6
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	a0 40       	sbci	r26, 0x00	; 0
    147c:	e1 f7       	brne	.-8      	; 0x1476 <main+0xb44>
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <main+0xb4e>
    1480:	00 00       	nop
					_delay_ms(280);
					LCD_vSend_char(password[passwordindex]);
    1482:	80 91 71 02 	lds	r24, 0x0271
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	8b 59       	subi	r24, 0x9B	; 155
    148a:	9d 4f       	sbci	r25, 0xFD	; 253
    148c:	dc 01       	movw	r26, r24
    148e:	8c 91       	ld	r24, X
    1490:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	90 e7       	ldi	r25, 0x70	; 112
    1498:	a2 e0       	ldi	r26, 0x02	; 2
    149a:	81 50       	subi	r24, 0x01	; 1
    149c:	90 40       	sbci	r25, 0x00	; 0
    149e:	a0 40       	sbci	r26, 0x00	; 0
    14a0:	e1 f7       	brne	.-8      	; 0x149a <main+0xb68>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <main+0xb72>
    14a4:	00 00       	nop
					_delay_ms(100);
					LCD_movecursor(2,12+passwordindex);
    14a6:	60 91 71 02 	lds	r22, 0x0271
    14aa:	64 5f       	subi	r22, 0xF4	; 244
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_char('*');
    14b2:	8a e2       	ldi	r24, 0x2A	; 42
    14b4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
					if(EEPROM_read(Guest_PASSWORD_OFFSET_Location + passwordindex) != password[passwordindex])
    14b8:	80 91 71 02 	lds	r24, 0x0271
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	04 96       	adiw	r24, 0x04	; 4
    14c0:	0e 94 0f 03 	call	0x61e	; 0x61e <EEPROM_read>
    14c4:	90 91 71 02 	lds	r25, 0x0271
    14c8:	29 2f       	mov	r18, r25
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	2b 59       	subi	r18, 0x9B	; 155
    14ce:	3d 4f       	sbci	r19, 0xFD	; 253
    14d0:	d9 01       	movw	r26, r18
    14d2:	2c 91       	ld	r18, X
    14d4:	82 17       	cp	r24, r18
    14d6:	11 f0       	breq	.+4      	; 0x14dc <main+0xbaa>
					{
						guestflag = 0;
    14d8:	10 92 6a 02 	sts	0x026A, r1
			else if('1' == selection)
			{
				LCD_vSend_string("Guest mode");
				LCD_movecursor(2,1);
				LCD_vSend_string("Enter pass:");
				for(passwordindex = 0;passwordindex<4;passwordindex++)
    14dc:	9f 5f       	subi	r25, 0xFF	; 255
    14de:	90 93 71 02 	sts	0x0271, r25
    14e2:	94 30       	cpi	r25, 0x04	; 4
    14e4:	08 f4       	brcc	.+2      	; 0x14e8 <main+0xbb6>
    14e6:	b2 cf       	rjmp	.-156    	; 0x144c <main+0xb1a>
					if(EEPROM_read(Guest_PASSWORD_OFFSET_Location + passwordindex) != password[passwordindex])
					{
						guestflag = 0;
					}
				}
				if(1 == guestflag)
    14e8:	80 91 6a 02 	lds	r24, 0x026A
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <main+0xbc0>
    14f0:	cb c1       	rjmp	.+918    	; 0x1888 <main+0xf56>
				{
					TCNT0 = 0;
    14f2:	12 be       	out	0x32, r1	; 50
					LED_on('C',1);
    14f4:	83 e4       	ldi	r24, 0x43	; 67
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	0e 94 8b 04 	call	0x916	; 0x916 <LED_on>
					modeentered = 1;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 70 02 	sts	0x0270, r24
					LCD_clearscreen();
    1506:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
					LCD_vSend_string("Right pass");
    150a:	86 e3       	ldi	r24, 0x36	; 54
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
					LCD_movecursor(2,1);
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_string("Guest mode");
    151a:	83 e2       	ldi	r24, 0x23	; 35
    151c:	92 e0       	ldi	r25, 0x02	; 2
    151e:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	92 e5       	ldi	r25, 0x52	; 82
    1526:	a7 e0       	ldi	r26, 0x07	; 7
    1528:	81 50       	subi	r24, 0x01	; 1
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	a0 40       	sbci	r26, 0x00	; 0
    152e:	e1 f7       	brne	.-8      	; 0x1528 <main+0xbf6>
    1530:	00 c0       	rjmp	.+0      	; 0x1532 <main+0xc00>
    1532:	00 00       	nop
					_delay_ms(300);
					LCD_clearscreen();
    1534:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
    1538:	81 e4       	ldi	r24, 0x41	; 65
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
					LCD_movecursor(2,1);
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	61 e0       	ldi	r22, 0x01	; 1
    1544:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_string("3:Room3 4:Room4");
    1548:	8e e2       	ldi	r24, 0x2E	; 46
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							LCD_vSend_string("wrong input");
							_delay_ms(1000);
							LCD_clearscreen();
						}
						LCD_clearscreen();
						LCD_vSend_string("1:Room1 2:Room2");
    1550:	0f 2e       	mov	r0, r31
    1552:	f1 e4       	ldi	r31, 0x41	; 65
    1554:	af 2e       	mov	r10, r31
    1556:	f1 e0       	ldi	r31, 0x01	; 1
    1558:	bf 2e       	mov	r11, r31
    155a:	f0 2d       	mov	r31, r0
						LCD_movecursor(2,1);
						LCD_vSend_string("3:Room3 4:Room4");
    155c:	0f 2e       	mov	r0, r31
    155e:	fe e2       	ldi	r31, 0x2E	; 46
    1560:	8f 2e       	mov	r8, r31
    1562:	f2 e0       	ldi	r31, 0x02	; 2
    1564:	9f 2e       	mov	r9, r31
    1566:	f0 2d       	mov	r31, r0
							break;
							case '2':
							SPI_MasterTransmitchar(R2S);
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
							LCD_vSend_string("Room2 S:");
    1568:	0f 2e       	mov	r0, r31
    156a:	f1 e8       	ldi	r31, 0x81	; 129
    156c:	6f 2e       	mov	r6, r31
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	7f 2e       	mov	r7, r31
    1572:	f0 2d       	mov	r31, r0
							else if(R2OFF == status)
							{
								LCD_vSend_string("OFF");
							}
							LCD_movecursor(2,1);
							LCD_vSend_string("1-on 2-off 0-RET");
    1574:	00 e7       	ldi	r16, 0x70	; 112
    1576:	11 e0       	ldi	r17, 0x01	; 1
							{
								LCD_vSend_string("ON");
							}
							else if(R2OFF == status)
							{
								LCD_vSend_string("OFF");
    1578:	0f 2e       	mov	r0, r31
    157a:	fc e6       	ldi	r31, 0x6C	; 108
    157c:	ef 2e       	mov	r14, r31
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	ff 2e       	mov	r15, r31
    1582:	f0 2d       	mov	r31, r0
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
							LCD_vSend_string("Room2 S:");
							if(R2ON == status)
							{
								LCD_vSend_string("ON");
    1584:	0f 2e       	mov	r0, r31
    1586:	f9 e6       	ldi	r31, 0x69	; 105
    1588:	cf 2e       	mov	r12, r31
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	df 2e       	mov	r13, r31
    158e:	f0 2d       	mov	r31, r0
								default:
								break;
							}
							break;
							default:
							LCD_vSend_string("wrong input");
    1590:	0f 2e       	mov	r0, r31
    1592:	f7 e1       	ldi	r31, 0x17	; 23
    1594:	4f 2e       	mov	r4, r31
    1596:	f2 e0       	ldi	r31, 0x02	; 2
    1598:	5f 2e       	mov	r5, r31
    159a:	f0 2d       	mov	r31, r0
							break;
							case '3':
							SPI_MasterTransmitchar(R3S);
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
							LCD_vSend_string("Room3 S:");
    159c:	0f 2e       	mov	r0, r31
    159e:	fa e8       	ldi	r31, 0x8A	; 138
    15a0:	2f 2e       	mov	r2, r31
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	3f 2e       	mov	r3, r31
    15a6:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("3:Room3 4:Room4");
					while(1)
					{
						do{
							selection = keypad_u8check_press();
    15a8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    15ac:	80 93 6e 02 	sts	0x026E, r24
							if(counter >= SESSION_TIME_OUTX100)
    15b0:	20 91 72 02 	lds	r18, 0x0272
    15b4:	30 91 73 02 	lds	r19, 0x0273
    15b8:	97 e1       	ldi	r25, 0x17	; 23
    15ba:	20 37       	cpi	r18, 0x70	; 112
    15bc:	39 07       	cpc	r19, r25
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <main+0xc90>
    15c0:	18 ca       	rjmp	.-3024   	; 0x9f2 <main+0xc0>
							{
								goto start;
							}
						}while(NOTPRESSED == selection);
    15c2:	8f 3f       	cpi	r24, 0xFF	; 255
    15c4:	89 f3       	breq	.-30     	; 0x15a8 <main+0xc76>
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	95 ed       	ldi	r25, 0xD5	; 213
    15ca:	a6 e0       	ldi	r26, 0x06	; 6
    15cc:	81 50       	subi	r24, 0x01	; 1
    15ce:	90 40       	sbci	r25, 0x00	; 0
    15d0:	a0 40       	sbci	r26, 0x00	; 0
    15d2:	e1 f7       	brne	.-8      	; 0x15cc <main+0xc9a>
    15d4:	00 c0       	rjmp	.+0      	; 0x15d6 <main+0xca4>
    15d6:	00 00       	nop
						_delay_ms(280);
						LCD_clearscreen();
    15d8:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						switch(selection)
    15dc:	80 91 6e 02 	lds	r24, 0x026E
    15e0:	82 33       	cpi	r24, 0x32	; 50
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <main+0xcb4>
    15e4:	58 c0       	rjmp	.+176    	; 0x1696 <main+0xd64>
    15e6:	83 33       	cpi	r24, 0x33	; 51
    15e8:	20 f4       	brcc	.+8      	; 0x15f2 <main+0xcc0>
    15ea:	81 33       	cpi	r24, 0x31	; 49
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <main+0xcbe>
    15ee:	31 c1       	rjmp	.+610    	; 0x1852 <main+0xf20>
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <main+0xcce>
    15f2:	83 33       	cpi	r24, 0x33	; 51
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <main+0xcc6>
    15f6:	99 c0       	rjmp	.+306    	; 0x172a <main+0xdf8>
    15f8:	84 33       	cpi	r24, 0x34	; 52
    15fa:	09 f0       	breq	.+2      	; 0x15fe <main+0xccc>
    15fc:	2a c1       	rjmp	.+596    	; 0x1852 <main+0xf20>
    15fe:	df c0       	rjmp	.+446    	; 0x17be <main+0xe8c>
						{
							case '1':
							SPI_MasterTransmitchar(R1S);
    1600:	80 e3       	ldi	r24, 0x30	; 48
    1602:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1606:	af ec       	ldi	r26, 0xCF	; 207
    1608:	b7 e0       	ldi	r27, 0x07	; 7
    160a:	11 97       	sbiw	r26, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <main+0xcd8>
    160e:	00 c0       	rjmp	.+0      	; 0x1610 <main+0xcde>
    1610:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1618:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room1 S:");
    161a:	80 e6       	ldi	r24, 0x60	; 96
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							if(R1ON == status)
    1622:	c4 33       	cpi	r28, 0x34	; 52
    1624:	21 f4       	brne	.+8      	; 0x162e <main+0xcfc>
							{
								LCD_vSend_string("ON");
    1626:	c6 01       	movw	r24, r12
    1628:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <main+0xd06>
							}
							else if(R1OFF == status)
    162e:	c5 33       	cpi	r28, 0x35	; 53
    1630:	19 f4       	brne	.+6      	; 0x1638 <main+0xd06>
							{
								LCD_vSend_string("OFF");
    1632:	c7 01       	movw	r24, r14
    1634:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	61 e0       	ldi	r22, 0x01	; 1
    163c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
    1640:	c8 01       	movw	r24, r16
    1642:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
    1646:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    164a:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
    164e:	20 91 72 02 	lds	r18, 0x0272
    1652:	30 91 73 02 	lds	r19, 0x0273
    1656:	b7 e1       	ldi	r27, 0x17	; 23
    1658:	20 37       	cpi	r18, 0x70	; 112
    165a:	3b 07       	cpc	r19, r27
    165c:	08 f0       	brcs	.+2      	; 0x1660 <main+0xd2e>
    165e:	c9 c9       	rjmp	.-3182   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	89 f3       	breq	.-30     	; 0x1646 <main+0xd14>
    1664:	8f ef       	ldi	r24, 0xFF	; 255
    1666:	95 ed       	ldi	r25, 0xD5	; 213
    1668:	a6 e0       	ldi	r26, 0x06	; 6
    166a:	81 50       	subi	r24, 0x01	; 1
    166c:	90 40       	sbci	r25, 0x00	; 0
    166e:	a0 40       	sbci	r26, 0x00	; 0
    1670:	e1 f7       	brne	.-8      	; 0x166a <main+0xd38>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <main+0xd42>
    1674:	00 00       	nop
							_delay_ms(280);
							switch(selection)
    1676:	80 91 6e 02 	lds	r24, 0x026E
    167a:	81 33       	cpi	r24, 0x31	; 49
    167c:	21 f0       	breq	.+8      	; 0x1686 <main+0xd54>
    167e:	82 33       	cpi	r24, 0x32	; 50
    1680:	09 f0       	breq	.+2      	; 0x1684 <main+0xd52>
    1682:	f5 c0       	rjmp	.+490    	; 0x186e <main+0xf3c>
    1684:	04 c0       	rjmp	.+8      	; 0x168e <main+0xd5c>
							{
								case '1':
								SPI_MasterTransmitchar(R1ON);
    1686:	84 e3       	ldi	r24, 0x34	; 52
    1688:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    168c:	f0 c0       	rjmp	.+480    	; 0x186e <main+0xf3c>
								case '2':
								SPI_MasterTransmitchar(R1OFF);
    168e:	85 e3       	ldi	r24, 0x35	; 53
    1690:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    1694:	ec c0       	rjmp	.+472    	; 0x186e <main+0xf3c>
								default:
								break;
							}
							break;
							case '2':
							SPI_MasterTransmitchar(R2S);
    1696:	81 e3       	ldi	r24, 0x31	; 49
    1698:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    169c:	af ec       	ldi	r26, 0xCF	; 207
    169e:	b7 e0       	ldi	r27, 0x07	; 7
    16a0:	11 97       	sbiw	r26, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <main+0xd6e>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <main+0xd74>
    16a6:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    16ae:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room2 S:");
    16b0:	c3 01       	movw	r24, r6
    16b2:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							if(R2ON == status)
    16b6:	c6 33       	cpi	r28, 0x36	; 54
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <main+0xd90>
							{
								LCD_vSend_string("ON");
    16ba:	c6 01       	movw	r24, r12
    16bc:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    16c0:	05 c0       	rjmp	.+10     	; 0x16cc <main+0xd9a>
							}
							else if(R2OFF == status)
    16c2:	c7 33       	cpi	r28, 0x37	; 55
    16c4:	19 f4       	brne	.+6      	; 0x16cc <main+0xd9a>
							{
								LCD_vSend_string("OFF");
    16c6:	c7 01       	movw	r24, r14
    16c8:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
    16da:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    16de:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
    16e2:	20 91 72 02 	lds	r18, 0x0272
    16e6:	30 91 73 02 	lds	r19, 0x0273
    16ea:	b7 e1       	ldi	r27, 0x17	; 23
    16ec:	20 37       	cpi	r18, 0x70	; 112
    16ee:	3b 07       	cpc	r19, r27
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <main+0xdc2>
    16f2:	7f c9       	rjmp	.-3330   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
    16f4:	8f 3f       	cpi	r24, 0xFF	; 255
    16f6:	89 f3       	breq	.-30     	; 0x16da <main+0xda8>
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	95 ed       	ldi	r25, 0xD5	; 213
    16fc:	a6 e0       	ldi	r26, 0x06	; 6
    16fe:	81 50       	subi	r24, 0x01	; 1
    1700:	90 40       	sbci	r25, 0x00	; 0
    1702:	a0 40       	sbci	r26, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <main+0xdcc>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <main+0xdd6>
    1708:	00 00       	nop
							_delay_ms(280);
							switch(selection)
    170a:	80 91 6e 02 	lds	r24, 0x026E
    170e:	81 33       	cpi	r24, 0x31	; 49
    1710:	21 f0       	breq	.+8      	; 0x171a <main+0xde8>
    1712:	82 33       	cpi	r24, 0x32	; 50
    1714:	09 f0       	breq	.+2      	; 0x1718 <main+0xde6>
    1716:	ab c0       	rjmp	.+342    	; 0x186e <main+0xf3c>
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <main+0xdf0>
							{
								case '1':
								SPI_MasterTransmitchar(R2ON);
    171a:	86 e3       	ldi	r24, 0x36	; 54
    171c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    1720:	a6 c0       	rjmp	.+332    	; 0x186e <main+0xf3c>
								case '2':
								SPI_MasterTransmitchar(R2OFF);
    1722:	87 e3       	ldi	r24, 0x37	; 55
    1724:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    1728:	a2 c0       	rjmp	.+324    	; 0x186e <main+0xf3c>
								default:
								break;
							}
							break;
							case '3':
							SPI_MasterTransmitchar(R3S);
    172a:	82 e3       	ldi	r24, 0x32	; 50
    172c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1730:	af ec       	ldi	r26, 0xCF	; 207
    1732:	b7 e0       	ldi	r27, 0x07	; 7
    1734:	11 97       	sbiw	r26, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <main+0xe02>
    1738:	00 c0       	rjmp	.+0      	; 0x173a <main+0xe08>
    173a:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1742:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room3 S:");
    1744:	c1 01       	movw	r24, r2
    1746:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							if(R3ON == status)
    174a:	c8 33       	cpi	r28, 0x38	; 56
    174c:	21 f4       	brne	.+8      	; 0x1756 <main+0xe24>
							{
								LCD_vSend_string("ON");
    174e:	c6 01       	movw	r24, r12
    1750:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <main+0xe2e>
							}
							else if(R3OFF == status)
    1756:	c9 33       	cpi	r28, 0x39	; 57
    1758:	19 f4       	brne	.+6      	; 0x1760 <main+0xe2e>
							{
								LCD_vSend_string("OFF");
    175a:	c7 01       	movw	r24, r14
    175c:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
    1768:	c8 01       	movw	r24, r16
    176a:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
    176e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    1772:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
    1776:	20 91 72 02 	lds	r18, 0x0272
    177a:	30 91 73 02 	lds	r19, 0x0273
    177e:	b7 e1       	ldi	r27, 0x17	; 23
    1780:	20 37       	cpi	r18, 0x70	; 112
    1782:	3b 07       	cpc	r19, r27
    1784:	08 f0       	brcs	.+2      	; 0x1788 <main+0xe56>
    1786:	35 c9       	rjmp	.-3478   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
    1788:	8f 3f       	cpi	r24, 0xFF	; 255
    178a:	89 f3       	breq	.-30     	; 0x176e <main+0xe3c>
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	95 ed       	ldi	r25, 0xD5	; 213
    1790:	a6 e0       	ldi	r26, 0x06	; 6
    1792:	81 50       	subi	r24, 0x01	; 1
    1794:	90 40       	sbci	r25, 0x00	; 0
    1796:	a0 40       	sbci	r26, 0x00	; 0
    1798:	e1 f7       	brne	.-8      	; 0x1792 <main+0xe60>
    179a:	00 c0       	rjmp	.+0      	; 0x179c <main+0xe6a>
    179c:	00 00       	nop
							_delay_ms(280);
							switch(selection)
    179e:	80 91 6e 02 	lds	r24, 0x026E
    17a2:	81 33       	cpi	r24, 0x31	; 49
    17a4:	21 f0       	breq	.+8      	; 0x17ae <main+0xe7c>
    17a6:	82 33       	cpi	r24, 0x32	; 50
    17a8:	09 f0       	breq	.+2      	; 0x17ac <main+0xe7a>
    17aa:	61 c0       	rjmp	.+194    	; 0x186e <main+0xf3c>
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <main+0xe84>
							{
								case '1':
								SPI_MasterTransmitchar(R3ON);
    17ae:	88 e3       	ldi	r24, 0x38	; 56
    17b0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    17b4:	5c c0       	rjmp	.+184    	; 0x186e <main+0xf3c>
								case '2':
								SPI_MasterTransmitchar(R3OFF);
    17b6:	89 e3       	ldi	r24, 0x39	; 57
    17b8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    17bc:	58 c0       	rjmp	.+176    	; 0x186e <main+0xf3c>
								default:
								break;
							}
							break;
							case '4':
							SPI_MasterTransmitchar(R4S);
    17be:	83 e3       	ldi	r24, 0x33	; 51
    17c0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    17c4:	af ec       	ldi	r26, 0xCF	; 207
    17c6:	b7 e0       	ldi	r27, 0x07	; 7
    17c8:	11 97       	sbiw	r26, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <main+0xe96>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <main+0xe9c>
    17ce:	00 00       	nop
							_delay_ms(1);
							status = SPI_MasterTransmitchar(0xff);
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
    17d2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    17d6:	c8 2f       	mov	r28, r24
							LCD_vSend_string("Room4 S:");
    17d8:	81 eb       	ldi	r24, 0xB1	; 177
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							if(R4ON == status)
    17e0:	c1 34       	cpi	r28, 0x41	; 65
    17e2:	21 f4       	brne	.+8      	; 0x17ec <main+0xeba>
							{
								LCD_vSend_string("ON");
    17e4:	c6 01       	movw	r24, r12
    17e6:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <main+0xec4>
							}
							else if(R4OFF == status)
    17ec:	c2 34       	cpi	r28, 0x42	; 66
    17ee:	19 f4       	brne	.+6      	; 0x17f6 <main+0xec4>
							{
								LCD_vSend_string("OFF");
    17f0:	c7 01       	movw	r24, r14
    17f2:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
    17f6:	82 e0       	ldi	r24, 0x02	; 2
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
							LCD_vSend_string("1-on 2-off 0-RET");
    17fe:	c8 01       	movw	r24, r16
    1800:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
							do{
								selection = keypad_u8check_press();
    1804:	0e 94 51 03 	call	0x6a2	; 0x6a2 <keypad_u8check_press>
    1808:	80 93 6e 02 	sts	0x026E, r24
								if(counter >= SESSION_TIME_OUTX100)
    180c:	20 91 72 02 	lds	r18, 0x0272
    1810:	30 91 73 02 	lds	r19, 0x0273
    1814:	b7 e1       	ldi	r27, 0x17	; 23
    1816:	20 37       	cpi	r18, 0x70	; 112
    1818:	3b 07       	cpc	r19, r27
    181a:	08 f0       	brcs	.+2      	; 0x181e <main+0xeec>
    181c:	ea c8       	rjmp	.-3628   	; 0x9f2 <main+0xc0>
								{
									goto start;
								}
							}while(NOTPRESSED == selection);
    181e:	8f 3f       	cpi	r24, 0xFF	; 255
    1820:	89 f3       	breq	.-30     	; 0x1804 <main+0xed2>
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	95 ed       	ldi	r25, 0xD5	; 213
    1826:	a6 e0       	ldi	r26, 0x06	; 6
    1828:	81 50       	subi	r24, 0x01	; 1
    182a:	90 40       	sbci	r25, 0x00	; 0
    182c:	a0 40       	sbci	r26, 0x00	; 0
    182e:	e1 f7       	brne	.-8      	; 0x1828 <main+0xef6>
    1830:	00 c0       	rjmp	.+0      	; 0x1832 <main+0xf00>
    1832:	00 00       	nop
							_delay_ms(280);
							switch(selection)
    1834:	80 91 6e 02 	lds	r24, 0x026E
    1838:	81 33       	cpi	r24, 0x31	; 49
    183a:	19 f0       	breq	.+6      	; 0x1842 <main+0xf10>
    183c:	82 33       	cpi	r24, 0x32	; 50
    183e:	b9 f4       	brne	.+46     	; 0x186e <main+0xf3c>
    1840:	04 c0       	rjmp	.+8      	; 0x184a <main+0xf18>
							{
								case '1':
								SPI_MasterTransmitchar(R4ON);
    1842:	81 e4       	ldi	r24, 0x41	; 65
    1844:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    1848:	12 c0       	rjmp	.+36     	; 0x186e <main+0xf3c>
								case '2':
								SPI_MasterTransmitchar(R4OFF);
    184a:	82 e4       	ldi	r24, 0x42	; 66
    184c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
								break;
    1850:	0e c0       	rjmp	.+28     	; 0x186e <main+0xf3c>
								default:
								break;
							}
							break;
							default:
							LCD_vSend_string("wrong input");
    1852:	c2 01       	movw	r24, r4
    1854:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
    185a:	99 e6       	ldi	r25, 0x69	; 105
    185c:	a8 e1       	ldi	r26, 0x18	; 24
    185e:	81 50       	subi	r24, 0x01	; 1
    1860:	90 40       	sbci	r25, 0x00	; 0
    1862:	a0 40       	sbci	r26, 0x00	; 0
    1864:	e1 f7       	brne	.-8      	; 0x185e <main+0xf2c>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <main+0xf36>
    1868:	00 00       	nop
							_delay_ms(1000);
							LCD_clearscreen();
    186a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						}
						LCD_clearscreen();
    186e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						LCD_vSend_string("1:Room1 2:Room2");
    1872:	c5 01       	movw	r24, r10
    1874:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
						LCD_movecursor(2,1);
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
						LCD_vSend_string("3:Room3 4:Room4");
    1880:	c4 01       	movw	r24, r8
    1882:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
						
					}
    1886:	90 ce       	rjmp	.-736    	; 0x15a8 <main+0xc76>
					
				}
				
				}
				if(0 == guestflag | 0 == adminflag)
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 91 6a 02 	lds	r25, 0x026A
    188e:	91 11       	cpse	r25, r1
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	88 23       	and	r24, r24
    1894:	41 f4       	brne	.+16     	; 0x18a6 <main+0xf74>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 91 6b 02 	lds	r25, 0x026B
    189c:	91 11       	cpse	r25, r1
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	88 23       	and	r24, r24
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <main+0xf74>
    18a4:	e5 c8       	rjmp	.-3638   	; 0xa70 <main+0x13e>
				{
					triesleft--;
    18a6:	80 91 69 02 	lds	r24, 0x0269
    18aa:	81 50       	subi	r24, 0x01	; 1
    18ac:	80 93 69 02 	sts	0x0269, r24
					LCD_clearscreen();
    18b0:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
					LCD_vSend_string("Wrong pass");
    18b4:	c6 01       	movw	r24, r12
    18b6:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
					LCD_movecursor(2,1);
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
					LCD_vSend_string("Tries left:");
    18c2:	c5 01       	movw	r24, r10
    18c4:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
					LCD_vSend_char(triesleft+48);
    18c8:	80 91 69 02 	lds	r24, 0x0269
    18cc:	80 5d       	subi	r24, 0xD0	; 208
    18ce:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_char>
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	94 e3       	ldi	r25, 0x34	; 52
    18d6:	ac e0       	ldi	r26, 0x0C	; 12
    18d8:	81 50       	subi	r24, 0x01	; 1
    18da:	90 40       	sbci	r25, 0x00	; 0
    18dc:	a0 40       	sbci	r26, 0x00	; 0
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <main+0xfa6>
    18e0:	00 c0       	rjmp	.+0      	; 0x18e2 <main+0xfb0>
    18e2:	00 00       	nop
					_delay_ms(500);
					LCD_clearscreen();
    18e4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
					guestflag = adminflag = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 6b 02 	sts	0x026B, r24
    18ee:	80 93 6a 02 	sts	0x026A, r24
					if(0 == triesleft)
    18f2:	80 91 69 02 	lds	r24, 0x0269
    18f6:	88 23       	and	r24, r24
    18f8:	09 f0       	breq	.+2      	; 0x18fc <main+0xfca>
    18fa:	ba c8       	rjmp	.-3724   	; 0xa70 <main+0x13e>
					{
						EEPROM_write(BLOCK_ENABLE,0x00);
    18fc:	80 e1       	ldi	r24, 0x10	; 16
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	0e 94 07 03 	call	0x60e	; 0x60e <EEPROM_write>
						LED_on('C',2);
    1906:	83 e4       	ldi	r24, 0x43	; 67
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	62 e0       	ldi	r22, 0x02	; 2
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	0e 94 8b 04 	call	0x916	; 0x916 <LED_on>
						LCD_vSend_string("login blocked");
    1912:	c3 01       	movw	r24, r6
    1914:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
						LCD_movecursor(2,1);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	61 e0       	ldi	r22, 0x01	; 1
    191c:	0e 94 66 04 	call	0x8cc	; 0x8cc <LCD_movecursor>
						LCD_vSend_string("wait 20 seconds");
    1920:	c2 01       	movw	r24, r4
    1922:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
    1926:	8a ea       	ldi	r24, 0xAA	; 170
    1928:	96 ee       	ldi	r25, 0xE6	; 230
    192a:	a6 e9       	ldi	r26, 0x96	; 150
    192c:	b1 e0       	ldi	r27, 0x01	; 1
    192e:	81 50       	subi	r24, 0x01	; 1
    1930:	90 40       	sbci	r25, 0x00	; 0
    1932:	a0 40       	sbci	r26, 0x00	; 0
    1934:	b0 40       	sbci	r27, 0x00	; 0
    1936:	d9 f7       	brne	.-10     	; 0x192e <main+0xffc>
    1938:	00 00       	nop
						_delay_ms(20000);
						LCD_clearscreen();
    193a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
						triesleft = TRIES_ALLOWED;
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	80 93 69 02 	sts	0x0269, r24
						LED_off('C',2);
    1944:	83 e4       	ldi	r24, 0x43	; 67
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	0e 94 8f 04 	call	0x91e	; 0x91e <LED_off>
    1950:	8f c8       	rjmp	.-3810   	; 0xa70 <main+0x13e>

00001952 <__vector_10>:
		} 
    }
}

ISR(TIMER0_COMP_vect)
{
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
	if(1 == modeentered)
    1974:	80 91 70 02 	lds	r24, 0x0270
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	71 f5       	brne	.+92     	; 0x19d8 <__vector_10+0x86>
	{
		counter++;
    197c:	80 91 72 02 	lds	r24, 0x0272
    1980:	90 91 73 02 	lds	r25, 0x0273
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	90 93 73 02 	sts	0x0273, r25
    198a:	80 93 72 02 	sts	0x0272, r24
		if(counter >= SESSION_TIME_OUTX100)
    198e:	80 91 72 02 	lds	r24, 0x0272
    1992:	90 91 73 02 	lds	r25, 0x0273
    1996:	27 e1       	ldi	r18, 0x17	; 23
    1998:	80 37       	cpi	r24, 0x70	; 112
    199a:	92 07       	cpc	r25, r18
    199c:	e8 f0       	brcs	.+58     	; 0x19d8 <__vector_10+0x86>
		{
			LCD_clearscreen();
    199e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <LCD_clearscreen>
			LED_off('C',0);
    19a2:	83 e4       	ldi	r24, 0x43	; 67
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	0e 94 8f 04 	call	0x91e	; 0x91e <LED_off>
			LED_off('C',1);
    19ae:	83 e4       	ldi	r24, 0x43	; 67
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	61 e0       	ldi	r22, 0x01	; 1
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	0e 94 8f 04 	call	0x91e	; 0x91e <LED_off>
			LCD_vSend_string("Session Timeout");
    19ba:	85 e5       	ldi	r24, 0x55	; 85
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 4d 04 	call	0x89a	; 0x89a <LCD_vSend_string>
			modeentered = 0;
    19c2:	10 92 70 02 	sts	0x0270, r1
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	96 e1       	ldi	r25, 0x16	; 22
    19ca:	a1 e1       	ldi	r26, 0x11	; 17
    19cc:	81 50       	subi	r24, 0x01	; 1
    19ce:	90 40       	sbci	r25, 0x00	; 0
    19d0:	a0 40       	sbci	r26, 0x00	; 0
    19d2:	e1 f7       	brne	.-8      	; 0x19cc <__vector_10+0x7a>
    19d4:	00 c0       	rjmp	.+0      	; 0x19d6 <__vector_10+0x84>
    19d6:	00 00       	nop
			
		}
	}

	
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <SPI_MasterInit>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_vsetPINDir('B',4,1);
    19fa:	82 e4       	ldi	r24, 0x42	; 66
    19fc:	64 e0       	ldi	r22, 0x04	; 4
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
    1a04:	82 e4       	ldi	r24, 0x42	; 66
    1a06:	65 e0       	ldi	r22, 0x05	; 5
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
    1a0e:	82 e4       	ldi	r24, 0x42	; 66
    1a10:	67 e0       	ldi	r22, 0x07	; 7
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
	/*Enable Master mode*/
	SET_BIT(SPCR,MSTR);
    1a18:	6c 9a       	sbi	0x0d, 4	; 13
	/*Set clock to fosc/16*/
	SET_BIT(SPCR,SPR0);
    1a1a:	68 9a       	sbi	0x0d, 0	; 13
	/*Enable SPI*/
    SET_BIT(SPCR,SPE);
    1a1c:	6e 9a       	sbi	0x0d, 6	; 13
	/*set SS to high */
	DIO_write('B',4,1);
    1a1e:	82 e4       	ldi	r24, 0x42	; 66
    1a20:	64 e0       	ldi	r22, 0x04	; 4
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
}
    1a28:	08 95       	ret

00001a2a <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*Enable SPI*/
	SET_BIT(SPCR,SPE);
    1a2a:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_vsetPINDir('B',6,1);
    1a2c:	82 e4       	ldi	r24, 0x42	; 66
    1a2e:	66 e0       	ldi	r22, 0x06	; 6
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 5b 00 	call	0xb6	; 0xb6 <DIO_vsetPINDir>
}
    1a36:	08 95       	ret

00001a38 <SPI_MasterTransmitchar>:

unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
    1a38:	cf 93       	push	r28
    1a3a:	c8 2f       	mov	r28, r24
	/*Clear SS to send data to slave*/
	DIO_write('B',4,0);
    1a3c:	82 e4       	ldi	r24, 0x42	; 66
    1a3e:	64 e0       	ldi	r22, 0x04	; 4
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 de 00 	call	0x1bc	; 0x1bc <DIO_write>
	/*Put data on SPDR*/
	SPDR=Data;
    1a46:	cf b9       	out	0x0f, r28	; 15
	/*Wait until the transmission is finished*/
     while(READ_BIT(SPSR,SPIF)==0);	
    1a48:	77 9b       	sbis	0x0e, 7	; 14
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <SPI_MasterTransmitchar+0x10>
	 /*read SPDR*/
	 return SPDR ;
    1a4c:	8f b1       	in	r24, 0x0f	; 15
}
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <SPI_SlaveReceivechar>:

unsigned char SPI_SlaveReceivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
    1a52:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
    1a54:	77 9b       	sbis	0x0e, 7	; 14
    1a56:	fe cf       	rjmp	.-4      	; 0x1a54 <SPI_SlaveReceivechar+0x2>
	/*read the received data*/
	return SPDR ;
    1a58:	8f b1       	in	r24, 0x0f	; 15
}
    1a5a:	08 95       	ret

00001a5c <SPI_MasterTransmitstring>:

void SPI_MasterTransmitstring(unsigned char *ptr)
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
    1a62:	88 81       	ld	r24, Y
    1a64:	88 23       	and	r24, r24
    1a66:	79 f0       	breq	.+30     	; 0x1a86 <SPI_MasterTransmitstring+0x2a>
	while(READ_BIT(SPSR,SPIF)==0);
	/*read the received data*/
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
    1a68:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr);
    1a6a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <SPI_MasterTransmitchar>
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	92 e5       	ldi	r25, 0x52	; 82
    1a72:	a7 e0       	ldi	r26, 0x07	; 7
    1a74:	81 50       	subi	r24, 0x01	; 1
    1a76:	90 40       	sbci	r25, 0x00	; 0
    1a78:	a0 40       	sbci	r26, 0x00	; 0
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <SPI_MasterTransmitstring+0x18>
    1a7c:	00 c0       	rjmp	.+0      	; 0x1a7e <SPI_MasterTransmitstring+0x22>
    1a7e:	00 00       	nop
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
{
	while((*ptr)!=0)
    1a80:	89 91       	ld	r24, Y+
    1a82:	88 23       	and	r24, r24
    1a84:	91 f7       	brne	.-28     	; 0x1a6a <SPI_MasterTransmitstring+0xe>
	{
		SPI_MasterTransmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
}
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <timer2_overflow_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
	/* select timer clock */
	SET_BIT(ASSR,AS2);
    1a8c:	82 b5       	in	r24, 0x22	; 34
    1a8e:	88 60       	ori	r24, 0x08	; 8
    1a90:	82 bd       	out	0x22, r24	; 34
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
    1a92:	85 b5       	in	r24, 0x25	; 37
    1a94:	81 60       	ori	r24, 0x01	; 1
    1a96:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    1a98:	85 b5       	in	r24, 0x25	; 37
    1a9a:	84 60       	ori	r24, 0x04	; 4
    1a9c:	85 bd       	out	0x25, r24	; 37
	/* enable interrupt*/
	sei();
    1a9e:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
    1aa0:	89 b7       	in	r24, 0x39	; 57
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	89 bf       	out	0x39, r24	; 57
}
    1aa6:	08 95       	ret

00001aa8 <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    1aa8:	83 b7       	in	r24, 0x33	; 51
    1aaa:	88 60       	ori	r24, 0x08	; 8
    1aac:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=79;                    // goto ISR every 10ms
    1aae:	8f e4       	ldi	r24, 0x4F	; 79
    1ab0:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
    1ab2:	83 b7       	in	r24, 0x33	; 51
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1ab8:	83 b7       	in	r24, 0x33	; 51
    1aba:	84 60       	ori	r24, 0x04	; 4
    1abc:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
    1abe:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    1ac0:	89 b7       	in	r24, 0x39	; 57
    1ac2:	82 60       	ori	r24, 0x02	; 2
    1ac4:	89 bf       	out	0x39, r24	; 57
}
    1ac6:	08 95       	ret

00001ac8 <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1ac8:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    1aca:	83 b7       	in	r24, 0x33	; 51
    1acc:	88 60       	ori	r24, 0x08	; 8
    1ace:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1ad0:	80 e4       	ldi	r24, 0x40	; 64
    1ad2:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1ad4:	83 b7       	in	r24, 0x33	; 51
    1ad6:	81 60       	ori	r24, 0x01	; 1
    1ad8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1ada:	83 b7       	in	r24, 0x33	; 51
    1adc:	84 60       	ori	r24, 0x04	; 4
    1ade:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
    1ae0:	83 b7       	in	r24, 0x33	; 51
    1ae2:	80 61       	ori	r24, 0x10	; 16
    1ae4:	83 bf       	out	0x33, r24	; 51
}
    1ae6:	08 95       	ret

00001ae8 <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1ae8:	bb 9a       	sbi	0x17, 3	; 23
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
    1aea:	83 b7       	in	r24, 0x33	; 51
    1aec:	80 64       	ori	r24, 0x40	; 64
    1aee:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    1af0:	83 b7       	in	r24, 0x33	; 51
    1af2:	88 60       	ori	r24, 0x08	; 8
    1af4:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1af6:	80 e4       	ldi	r24, 0x40	; 64
    1af8:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1afa:	83 b7       	in	r24, 0x33	; 51
    1afc:	81 60       	ori	r24, 0x01	; 1
    1afe:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1b00:	83 b7       	in	r24, 0x33	; 51
    1b02:	84 60       	ori	r24, 0x04	; 4
    1b04:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
    1b06:	83 b7       	in	r24, 0x33	; 51
    1b08:	80 61       	ori	r24, 0x10	; 16
    1b0a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1b0c:	83 b7       	in	r24, 0x33	; 51
    1b0e:	80 62       	ori	r24, 0x20	; 32
    1b10:	83 bf       	out	0x33, r24	; 51
}
    1b12:	08 95       	ret

00001b14 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1b14:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
    1b16:	83 b7       	in	r24, 0x33	; 51
    1b18:	80 64       	ori	r24, 0x40	; 64
    1b1a:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1b1c:	80 e4       	ldi	r24, 0x40	; 64
    1b1e:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1b20:	83 b7       	in	r24, 0x33	; 51
    1b22:	81 60       	ori	r24, 0x01	; 1
    1b24:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1b26:	83 b7       	in	r24, 0x33	; 51
    1b28:	84 60       	ori	r24, 0x04	; 4
    1b2a:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
    1b2c:	83 b7       	in	r24, 0x33	; 51
    1b2e:	80 61       	ori	r24, 0x10	; 16
    1b30:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1b32:	83 b7       	in	r24, 0x33	; 51
    1b34:	80 62       	ori	r24, 0x20	; 32
    1b36:	83 bf       	out	0x33, r24	; 51
}
    1b38:	08 95       	ret

00001b3a <_exit>:
    1b3a:	f8 94       	cli

00001b3c <__stop_program>:
    1b3c:	ff cf       	rjmp	.-2      	; 0x1b3c <__stop_program>
